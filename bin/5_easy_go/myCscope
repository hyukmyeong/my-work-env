#!/bin/bash

declare check_kernel

echo
echo "your dir : $PWD"

echo "what do you want?"
echo "1.generate 2.clean"
read -p "you selected : " input1

if [[ $PWD == ?(*)kernel?(*) ]]
then
    echo "I'm kernel"
    make ARCH=arm tags cscope
    exit 0
fi

if [ "$input1" -eq 1 ]; then

    echo ""
    echo "Do you use clang for code-completion?"
    echo "1.yes 2.no"
    read -p "you selected : " input2

    if [ "$input2" -eq 1 ]; then
        # clang completion plugins
        # (1) emacs : company-rtags, company-irony
        # (2) vim   : youcompleteme, clang_complete

        # how to create compile_commands.json
        echo "ok, then build your project like below";
        echo "(1) cmake : cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..";
        echo "(2) yocto : EXTRA_OECMAKE += "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"";
    else
        echo "ok, then do nothing";
        # below is substitude with the option, set path, in .vimrc
        # mkdir usr_include
        # cp -R /usr/include/c++/7 usr_include/
    fi

    find . -type d \( -name .git -o -name oe-workdir -o -name oe-logs \) -prune -false \
        -o -name '*.[chS]' -o -name '*.mk' -o -name '*.cc' -o -name '*.hpp' -o -name '*.cpp*' -o -name 'Makefile'-o -name 'CMakeLists.xtx' ! -type l  >cscope.files

    # find ./usr_include >>cscope.files
    # cscope -bqkv -i cscope.files
    # cscope -b -k

    cscope -b -q -k -R -v -i cscope.files
    ctags -R --c++-kinds=+p --fields=+iaS --extra=+q --exclude={.git,oe-workdir,oe-logs}
    gtags

    if [ ! -e .git ]; then
        touch .projectile
    fi

elif [ "$input1" -eq 2 ]; then

    rm -rf usr_*
    rm -rf *cscope*
    rm -rf *tags*
    rm -rf GPATH GRTAGS GSYMS GTAGS

    if [ -e .projectile ]; then
        rm .projectile
    fi

    if [ -e compile_commands.json ]; then
        rm compile_commands.json
    fi

    if [ -e usr_include ]; then
        rm -rf usr_include
    fi

else
    echo "do nothing"
fi

