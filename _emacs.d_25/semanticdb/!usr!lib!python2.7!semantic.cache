;; Object semanticdb-project-database-file-d6d310
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-d6d310"
  :tables
  (list
    (semanticdb-table "semanticdb-table-b99578"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1157])
            ("errno" include nil nil [1163 1180])
            ("sys" include nil nil [1163 1180])
            ("_names" variable nil nil [1182 1215])
            ("__all__" variable nil nil [1265 1440])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1464 1470]))              ) nil [1442 1600])
            ("if" code nil nil [1601 3131])
            ("sys" variable nil nil [3132 3161])
            ("" code nil nil [3182 3250])
            ("del" code nil nil [3252 3262])
            ("SEEK_SET" variable nil nil [3384 3396])
            ("SEEK_CUR" variable nil nil [3397 3409])
            ("SEEK_END" variable nil nil [3410 3422])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3532 3536])
                    ("mode" variable nil (reparse-symbol function_parameters) [3538 3542]))                  )
                nil [3519 4271])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4287 4291]))                  )
                nil [4272 4978])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4991 4994])
                    ("new" variable nil (reparse-symbol function_parameters) [4996 4999]))                  )
                nil [4979 5846])
            ("__all__" code nil nil [5847 5900])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune the
    search, or to impose a specific order of visiting.  Modifying dirnames when
    topdown is false is ineffective, since the directories in dirnames have
    already been generated by the time dirnames itself is generated. No matter
    the value of topdown, the list of subdirectories is retrieved before the
    tuples for the directory and its subdirectories are generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories

    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5911 5914])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5916 5923])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5930 5937])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5944 5955]))                  )
                nil [5902 9834])
            ("__all__" code nil nil [9835 9857])
            ("try" code nil nil [9899 9951])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9962 9966])
                    ("args" variable nil (reparse-symbol function_parameters) [9968 9973]))                  )
                nil [9952 10121])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10133 10137])
                    ("args" variable nil (reparse-symbol function_parameters) [10139 10144]))                  )
                nil [10122 10348])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10360 10364])
                    ("args" variable nil (reparse-symbol function_parameters) [10366 10371]))                  )
                nil [10349 10557])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10570 10574])
                    ("args" variable nil (reparse-symbol function_parameters) [10576 10581]))                  )
                nil [10558 10827])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10839 10843])
                    ("args" variable nil (reparse-symbol function_parameters) [10845 10849]))                  )
                nil [10828 11080])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [11093 11097])
                    ("args" variable nil (reparse-symbol function_parameters) [11099 11103])
                    ("env" variable nil (reparse-symbol function_parameters) [11105 11108]))                  )
                nil [11081 11375])
            ("__all__" code nil nil [11376 11448])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11463 11467])
                ("args" variable nil (reparse-symbol function_parameters) [11469 11473])
                ("env" variable nil (reparse-symbol function_parameters) [11475 11478]))              ) nil [11450 12318])
            ("try" code nil nil [12380 16589])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16601 16604])
                    ("default" variable nil (reparse-symbol function_parameters) [16606 16613]))                  )
                nil [16590 16797])
            ("__all__" code nil nil [16797 16821])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16835 16839]))              ) nil [16823 16871])
            ("if" code nil nil [16915 19818])
            ("if" code nil nil [19819 20816])
            ("if" code nil nil [20818 21924])
            ("if" code nil nil [21958 25224])
            ("copy_reg" include nil nil [25225 25253])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25277 25280])
                ("dict" variable nil (reparse-symbol function_parameters) [25282 25286]))              ) nil [25255 25323])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25348 25350]))              ) nil [25324 25425])
            ("try" code nil nil [25426 25560])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25586 25589])
                ("dict" variable nil (reparse-symbol function_parameters) [25591 25595]))              ) nil [25561 25635])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25663 25665]))              ) nil [25636 25743])
            ("try" code nil nil [25744 25911]))          
      :file "os.py"
      :pointmax 25911
      :fsize 25910
      :lastmodtime '(24343 10970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-b9953c"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("try" code nil nil [5391 5454])
            ("__all__" variable nil nil [5472 5700])
            ("__version__" variable nil nil [5702 5723])
            ("I" variable nil nil [5733 5781])
            ("L" variable nil nil [5796 5836])
            ("U" variable nil nil [5867 5909])
            ("M" variable nil nil [5934 5980])
            ("S" variable nil nil [6013 6053])
            ("X" variable nil nil [6079 6121])
            ("T" variable nil nil [6209 6253])
            ("DEBUG" variable nil nil [6277 6311])
            ("error" variable nil nil [6362 6387])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6490 6497])
                    ("string" variable nil (reparse-symbol function_parameters) [6499 6505])
                    ("flags" variable nil (reparse-symbol function_parameters) [6507 6512]))                  )
                nil [6480 6691])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6703 6710])
                    ("string" variable nil (reparse-symbol function_parameters) [6712 6718])
                    ("flags" variable nil (reparse-symbol function_parameters) [6720 6725]))                  )
                nil [6692 6908])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6917 6924])
                    ("repl" variable nil (reparse-symbol function_parameters) [6926 6930])
                    ("string" variable nil (reparse-symbol function_parameters) [6932 6938])
                    ("count" variable nil (reparse-symbol function_parameters) [6940 6945])
                    ("flags" variable nil (reparse-symbol function_parameters) [6949 6954]))                  )
                nil [6909 7377])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7387 7394])
                    ("repl" variable nil (reparse-symbol function_parameters) [7396 7400])
                    ("string" variable nil (reparse-symbol function_parameters) [7402 7408])
                    ("count" variable nil (reparse-symbol function_parameters) [7410 7415])
                    ("flags" variable nil (reparse-symbol function_parameters) [7419 7424]))                  )
                nil [7378 7977])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7988 7995])
                    ("string" variable nil (reparse-symbol function_parameters) [7997 8003])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [8005 8013])
                    ("flags" variable nil (reparse-symbol function_parameters) [8017 8022]))                  )
                nil [7978 8214])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8227 8234])
                    ("string" variable nil (reparse-symbol function_parameters) [8236 8242])
                    ("flags" variable nil (reparse-symbol function_parameters) [8244 8249]))                  )
                nil [8215 8581])
            ("if" code nil nil [8582 8941])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8954 8961])
                ("flags" variable nil (reparse-symbol function_parameters) [8963 8968]))              ) nil [8942 9081])
            ("purge" function nil nil [9082 9179])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9193 9200])
                ("flags" variable nil (reparse-symbol function_parameters) [9202 9207]))              ) nil [9180 9311])
            ("_alphanum" variable nil nil [9312 9404])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9417 9424]))              ) nil [9406 13424]))          
      :file "re.py"
      :pointmax 13424
      :fsize 13423
      :lastmodtime '(24343 10970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-baa760"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Parser for command line options.

This module helps scripts to parse the command line arguments in
sys.argv.  It supports the same conventions as the Unix getopt()
function (including the special meanings of arguments of the form `-'
and `--').  Long options similar to those supported by GNU software
may be used as well via an optional third argument.  This module
provides two functions and an exception:

getopt() -- Parse command line options
gnu_getopt() -- Like getopt(), but allow option and non-option arguments
to be intermixed.
GetoptError -- exception (class) raised with 'opt' attribute, which is the
option involved with the exception.
\"\"\"" code nil nil [1 657])
            ("__all__" variable nil nil [1219 1274])
            ("os" include nil nil [1276 1285])
            ("GetoptError" type
               (:superclasses ("Exception")
                :members 
                  ( ("opt" variable nil (reparse-symbol indented_block_body) [1321 1329])
                    ("msg" variable nil (reparse-symbol indented_block_body) [1334 1342])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1388 1402])
                            ("self" variable nil (reparse-symbol indented_block_body) [1411 1425])
                            ("Exception" code nil (reparse-symbol indented_block_body) [1434 1468]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1360 1364])
                            ("msg" variable nil (reparse-symbol function_parameters) [1366 1369])
                            ("opt" variable nil (reparse-symbol function_parameters) [1371 1374]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1347 1469])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1486 1490]))                          )
                        (reparse-symbol indented_block_body) [1474 1517]))                  
                :type "class")
                nil [1287 1517])
            ("error" variable nil nil [1518 1537])
            ("getopt" function
               (:documentation "getopt(args, options[, long_options]) -> opts, args

    Parses command line options and parameter list.  args is the
    argument list to be parsed, without the leading reference to the
    running program.  Typically, this means \"sys.argv[1:]\".  shortopts
    is the string of option letters that the script wants to
    recognize, with options that require an argument followed by a
    colon (i.e., the same format that Unix getopt() uses).  If
    specified, longopts is a list of strings with the names of the
    long options which should be supported.  The leading '--'
    characters should not be included in the option name.  Options
    which require an argument should be followed by an equal sign
    ('=').

    The return value consists of two elements: the first is a list of
    (option, value) pairs; the second is the list of program arguments
    left after the option list was stripped (this is a trailing slice
    of the first argument).  Each option-and-value pair returned has
    the option as its first element, prefixed with a hyphen (e.g.,
    '-x'), and the option argument as its second element, or an empty
    string if the option has no argument.  The options occur in the
    list in the same order in which they were found, thus allowing
    multiple occurrences.  Long and short options may be mixed.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [1575 1579])
                    ("shortopts" variable nil (reparse-symbol function_parameters) [1581 1590])
                    ("longopts" variable nil (reparse-symbol function_parameters) [1592 1600]))                  )
                nil [1564 3446])
            ("gnu_getopt" function
               (:documentation "getopt(args, options[, long_options]) -> opts, args

    This function works like getopt(), except that GNU style scanning
    mode is used by default. This means that option and non-option
    arguments may be intermixed. The getopt() function stops
    processing options as soon as a non-option argument is
    encountered.

    If the first character of the option string is `+', or if the
    environment variable POSIXLY_CORRECT is set, then option
    processing stops as soon as a non-option argument is encountered.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [3462 3466])
                    ("shortopts" variable nil (reparse-symbol function_parameters) [3468 3477])
                    ("longopts" variable nil (reparse-symbol function_parameters) [3479 3487]))                  )
                nil [3447 5003])
            ("do_longs" function (:arguments 
              ( ("opts" variable nil (reparse-symbol function_parameters) [5017 5021])
                ("opt" variable nil (reparse-symbol function_parameters) [5023 5026])
                ("longopts" variable nil (reparse-symbol function_parameters) [5028 5036])
                ("args" variable nil (reparse-symbol function_parameters) [5038 5042]))              ) nil [5004 5590])
            ("long_has_args" function (:arguments 
              ( ("opt" variable nil (reparse-symbol function_parameters) [5653 5656])
                ("longopts" variable nil (reparse-symbol function_parameters) [5658 5666]))              ) nil [5635 6445])
            ("do_shorts" function (:arguments 
              ( ("opts" variable nil (reparse-symbol function_parameters) [6460 6464])
                ("optstring" variable nil (reparse-symbol function_parameters) [6466 6475])
                ("shortopts" variable nil (reparse-symbol function_parameters) [6477 6486])
                ("args" variable nil (reparse-symbol function_parameters) [6488 6492]))              ) nil [6446 6996])
            ("short_has_arg" function (:arguments 
              ( ("opt" variable nil (reparse-symbol function_parameters) [7015 7018])
                ("shortopts" variable nil (reparse-symbol function_parameters) [7020 7029]))              ) nil [6997 7219])
            ("if" code nil nil [7220 7320]))          
      :file "getopt.py"
      :pointmax 7320
      :fsize 7319
      :lastmodtime '(24343 10970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-d2bebc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utilities to get a password and/or the current user name.

getpass(prompt[, stream]) - Prompt for a password, with echo turned off.
getuser() - Get the user name from the environment or password database.

GetPassWarning - This UserWarning is issued when getpass() cannot prevent
                 echoing of the password contents while reading.

On Windows, the msvcrt module will be used.
On the Mac EasyDialogs.AskPassword is used, if available.

\"\"\"" code nil nil [1 456])
            ("warnings" include nil nil [611 635])
            ("sys" include nil nil [611 635])
            ("os" include nil nil [611 635])
            ("__all__" variable nil nil [637 685])
            ("GetPassWarning" type
               (:superclasses ("UserWarning")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [688 728])
            ("unix_getpass" function
               (:documentation "Prompt for a password, with echo turned off.

    Args:
      prompt: Written on stream to ask for the input.  Default: 'Password: '
      stream: A writable file object to display the prompt.  Defaults to
              the tty.  If no tty is available defaults to sys.stderr.
    Returns:
      The seKr3t input.
    Raises:
      EOFError: If our input tty or stdin was closed.
      GetPassWarning: When we were unable to turn echo off on the input.

    Always restores terminal settings before returning.
    "
                :arguments 
                  ( ("prompt" variable nil (reparse-symbol function_parameters) [747 753])
                    ("stream" variable nil (reparse-symbol function_parameters) [768 774]))                  )
                nil [730 3053])
            ("win_getpass" function
               (:documentation "Prompt for password with echo off, using Windows getch()."
                :arguments 
                  ( ("prompt" variable nil (reparse-symbol function_parameters) [3071 3077])
                    ("stream" variable nil (reparse-symbol function_parameters) [3092 3098]))                  )
                nil [3055 3634])
            ("fallback_getpass" function (:arguments 
              ( ("prompt" variable nil (reparse-symbol function_parameters) [3657 3663])
                ("stream" variable nil (reparse-symbol function_parameters) [3678 3684]))              ) nil [3636 3945])
            ("_raw_input" function (:arguments 
              ( ("prompt" variable nil (reparse-symbol function_parameters) [3962 3968])
                ("stream" variable nil (reparse-symbol function_parameters) [3973 3979])
                ("input" variable nil (reparse-symbol function_parameters) [3986 3991]))              ) nil [3947 4489])
            ("getuser" function (:documentation "Get the username from the environment or password database.

    First try various environment variables, then the password
    database.  This works on Windows as long as USERNAME is set.

    ") nil [4491 4972])
            ("try" code nil nil [5025 5564]))          
      :file "getpass.py"
      :pointmax 5564
      :fsize 5563
      :lastmodtime '(24343 10970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-ae3510"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4346])
            ("_extension_registry" variable nil nil [4828 4852])
            ("_inverted_registry" variable nil nil [4882 4905])
            ("_extension_cache" variable nil nil [4936 4957])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5132 5138])
                    ("name" variable nil (reparse-symbol function_parameters) [5140 5144])
                    ("code" variable nil (reparse-symbol function_parameters) [5146 5150]))                  )
                nil [5114 5861])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5883 5889])
                    ("name" variable nil (reparse-symbol function_parameters) [5891 5895])
                    ("code" variable nil (reparse-symbol function_parameters) [5897 5901]))                  )
                nil [5862 6321])
            ("clear_extension_cache" function nil nil [6322 6380]))          
      :file "copy_reg.py"
      :pointmax 6801
      :fsize 6800
      :lastmodtime '(24343 10970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-b0ac00"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [249 286])
            ("sys" include nil nil [288 304])
            ("_sre" include nil nil [288 304])
            ("sre_parse" include nil nil [305 321])
            ("sre_constants" include nil nil [322 349])
            ("assert" code nil nil [351 400])
            ("if" code nil nil [402 477])
            ("_LITERAL_CODES" variable nil nil [478 522])
            ("_REPEATING_CODES" variable nil nil [523 579])
            ("_SUCCESS_CODES" variable nil nil [580 620])
            ("_ASSERT_CODES" variable nil nil [621 662])
            ("_equivalences" variable nil nil [726 1816])
            ("_ignorecase_fixes" variable nil nil [1894 2003])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [2018 2022])
                ("pattern" variable nil (reparse-symbol function_parameters) [2024 2031])
                ("flags" variable nil (reparse-symbol function_parameters) [2033 2038]))              ) nil [2005 8018])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [8040 8047])
                ("flags" variable nil (reparse-symbol function_parameters) [8049 8054])
                ("code" variable nil (reparse-symbol function_parameters) [8056 8060])
                ("fixup" variable nil (reparse-symbol function_parameters) [8062 8067])
                ("fixes" variable nil (reparse-symbol function_parameters) [8074 8079]))              ) nil [8019 8929])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [8952 8959])
                ("fixup" variable nil (reparse-symbol function_parameters) [8961 8966])
                ("fixes" variable nil (reparse-symbol function_parameters) [8968 8973])
                ("isunicode" variable nil (reparse-symbol function_parameters) [8975 8984]))              ) nil [8930 13942])
            ("_fixup_range" function (:arguments 
              ( ("lo" variable nil (reparse-symbol function_parameters) [13960 13962])
                ("hi" variable nil (reparse-symbol function_parameters) [13964 13966])
                ("ranges" variable nil (reparse-symbol function_parameters) [13968 13974])
                ("fixup" variable nil (reparse-symbol function_parameters) [13976 13981]))              ) nil [13943 14467])
            ("_CODEBITS" code nil nil [14468 14497])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [14545 14549])
                ("_CODEBITS" variable nil (reparse-symbol function_parameters) [14551 14560])
                ("_int" variable nil (reparse-symbol function_parameters) [14572 14576]))              ) nil [14530 14724])
            ("_bytes_to_codes" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [14745 14746]))              ) nil [14725 15021])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [15034 15036]))              ) nil [15022 15165])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [15184 15188])
                ("pattern" variable nil (reparse-symbol function_parameters) [15190 15197])
                ("flags" variable nil (reparse-symbol function_parameters) [15199 15204]))              ) nil [15166 18564])
            ("try" code nil nil [18565 18686])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [18700 18703]))              ) nil [18687 18800])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [18811 18812])
                ("flags" variable nil (reparse-symbol function_parameters) [18814 18819]))              ) nil [18801 19046])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [19059 19060])
                ("flags" variable nil (reparse-symbol function_parameters) [19062 19067]))              ) nil [19047 19791]))          
      :file "sre_compile.py"
      :pointmax 19791
      :fsize 19817
      :lastmodtime '(24343 10970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-b859ec"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("SPECIAL_CHARS" variable nil nil [386 417])
            ("REPEAT_CHARS" variable nil nil [418 439])
            ("DIGITS" variable nil nil [441 467])
            ("OCTDIGITS" variable nil nil [469 496])
            ("HEXDIGITS" variable nil nil [497 538])
            ("WHITESPACE" variable nil nil [540 571])
            ("ESCAPES" variable nil nil [573 849])
            ("CATEGORIES" variable nil nil [851 1327])
            ("FLAGS" variable nil nil [1329 1571])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1683 1697])
                            ("self" variable nil (reparse-symbol indented_block_body) [1706 1720])
                            ("self" variable nil (reparse-symbol indented_block_body) [1729 1744])
                            ("self" variable nil (reparse-symbol indented_block_body) [1753 1772])
                            ("self" variable nil (reparse-symbol indented_block_body) [1781 1800]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1668 1672]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1655 1801])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1820 1824])
                            ("name" variable nil (reparse-symbol function_parameters) [1826 1830]))                          )
                        (reparse-symbol indented_block_body) [1806 2243])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2262 2266])
                            ("gid" variable nil (reparse-symbol function_parameters) [2268 2271]))                          )
                        (reparse-symbol indented_block_body) [2247 2304])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2323 2327])
                            ("gid" variable nil (reparse-symbol function_parameters) [2329 2332]))                          )
                        (reparse-symbol indented_block_body) [2308 2393]))                  
                :type "class")
                nil [1573 2393])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2505 2527])
                            ("if" code nil (reparse-symbol indented_block_body) [2536 2575])
                            ("self" variable nil (reparse-symbol indented_block_body) [2583 2599])
                            ("self" variable nil (reparse-symbol indented_block_body) [2608 2625]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2470 2474])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2476 2483])
                            ("data" variable nil (reparse-symbol function_parameters) [2485 2489]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2457 2626])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2639 2643])
                            ("level" variable nil (reparse-symbol function_parameters) [2645 2650]))                          )
                        (reparse-symbol indented_block_body) [2630 3879])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3896 3900]))                          )
                        (reparse-symbol indented_block_body) [3883 3934])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3950 3954]))                          )
                        (reparse-symbol indented_block_body) [3938 3987])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4007 4011])
                            ("index" variable nil (reparse-symbol function_parameters) [4013 4018]))                          )
                        (reparse-symbol indented_block_body) [3991 4050])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4070 4074])
                            ("index" variable nil (reparse-symbol function_parameters) [4076 4081]))                          )
                        (reparse-symbol indented_block_body) [4054 4215])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4235 4239])
                            ("index" variable nil (reparse-symbol function_parameters) [4241 4246])
                            ("code" variable nil (reparse-symbol function_parameters) [4248 4252]))                          )
                        (reparse-symbol indented_block_body) [4219 4287])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4302 4306])
                            ("index" variable nil (reparse-symbol function_parameters) [4308 4313])
                            ("code" variable nil (reparse-symbol function_parameters) [4315 4319]))                          )
                        (reparse-symbol indented_block_body) [4291 4360])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("code" variable nil (reparse-symbol function_parameters) [4381 4385]))                          )
                        (reparse-symbol indented_block_body) [4364 4419])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4436 4440]))                          )
                        (reparse-symbol indented_block_body) [4423 5644]))                  
                :type "class")
                nil [2394 5644])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5702 5722])
                            ("self" variable nil (reparse-symbol indented_block_body) [5731 5745])
                            ("self" code nil (reparse-symbol indented_block_body) [5754 5767]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5679 5683])
                            ("string" variable nil (reparse-symbol function_parameters) [5685 5691]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5666 5768])
                    ("raise" code nil (reparse-symbol indented_block_body) [8037 8083]))                  
                :type "class")
                nil [5645 8084])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [8097 8103])
                ("escape" variable nil (reparse-symbol function_parameters) [8105 8111])
                ("state" variable nil (reparse-symbol function_parameters) [8113 8118]))              ) nil [8085 10034])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [10050 10056])
                ("state" variable nil (reparse-symbol function_parameters) [10058 10063])
                ("nested" variable nil (reparse-symbol function_parameters) [10065 10071]))              ) nil [10035 11660])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11681 11687])
                ("state" variable nil (reparse-symbol function_parameters) [11689 11694])
                ("condgroup" variable nil (reparse-symbol function_parameters) [11696 11705]))              ) nil [11661 12179])
            ("_PATTERNENDERS" variable nil nil [12180 12206])
            ("_ASSERTCHARS" variable nil nil [12207 12232])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [12233 12267])
            ("_REPEATCODES" variable nil nil [12268 12312])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [12325 12331])
                ("state" variable nil (reparse-symbol function_parameters) [12333 12338]))              ) nil [12314 28506])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [28527 28535])
                ("match" variable nil (reparse-symbol function_parameters) [28537 28542]))              ) nil [28507 28912]))          
      :file "sre_parse.py"
      :pointmax 28912
      :fsize 28911
      :lastmodtime '(24343 10971 0 0)
      :unmatched-syntax '((ASSIGN 28219 . 28220) (INDENT_BLOCK 8020 . 8033) (NEWLINE 8019 . 8020) (COLON 8018 . 8019)))
    (semanticdb-table "semanticdb-table-e56da4"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 372])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [388 395])
                    ("category" variable nil (reparse-symbol function_parameters) [397 405])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [412 422]))                  )
                nil [375 714])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [733 740])
                    ("category" variable nil (reparse-symbol function_parameters) [742 750])
                    ("filename" variable nil (reparse-symbol function_parameters) [752 760])
                    ("lineno" variable nil (reparse-symbol function_parameters) [762 768])
                    ("file" variable nil (reparse-symbol function_parameters) [770 774])
                    ("line" variable nil (reparse-symbol function_parameters) [781 785]))                  )
                nil [715 1204])
            ("showwarning" variable nil nil [1291 1318])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1338 1345])
                    ("category" variable nil (reparse-symbol function_parameters) [1347 1355])
                    ("filename" variable nil (reparse-symbol function_parameters) [1357 1365])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1367 1373])
                    ("line" variable nil (reparse-symbol function_parameters) [1375 1379]))                  )
                nil [1320 2223])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2243 2249])
                    ("message" variable nil (reparse-symbol function_parameters) [2251 2258])
                    ("category" variable nil (reparse-symbol function_parameters) [2263 2271])
                    ("module" variable nil (reparse-symbol function_parameters) [2281 2287])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2292 2298])
                    ("append" variable nil (reparse-symbol function_parameters) [2321 2327]))                  )
                nil [2224 3558])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [3576 3582])
                    ("category" variable nil (reparse-symbol function_parameters) [3584 3592])
                    ("lineno" variable nil (reparse-symbol function_parameters) [3602 3608])
                    ("append" variable nil (reparse-symbol function_parameters) [3612 3618]))                  )
                nil [3559 4413])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [4414 4531])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [4622 4626]))                  
                :type "class")
                nil [4532 4627])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [4706 4710]))              ) nil [4686 4875])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [4922 4925]))              ) nil [4907 5733])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [5775 5781]))              ) nil [5760 6060])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [6104 6112]))              ) nil [6087 6920])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [6970 6977])
                    ("category" variable nil (reparse-symbol function_parameters) [6979 6987])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [6994 7004]))                  )
                nil [6961 8300])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [8319 8326])
                ("category" variable nil (reparse-symbol function_parameters) [8328 8336])
                ("filename" variable nil (reparse-symbol function_parameters) [8338 8346])
                ("lineno" variable nil (reparse-symbol function_parameters) [8348 8354])
                ("module" variable nil (reparse-symbol function_parameters) [8374 8380])
                ("registry" variable nil (reparse-symbol function_parameters) [8387 8395])
                ("module_globals" variable nil (reparse-symbol function_parameters) [8402 8416]))              ) nil [8301 10311])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [10408 10512])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [10625 10648])
                            ("for" code nil (reparse-symbol indented_block_body) [10657 10744])
                            ("None" code nil (reparse-symbol indented_block_body) [10809 10813]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10531 10535])
                            ("message" variable nil (reparse-symbol function_parameters) [10537 10544])
                            ("category" variable nil (reparse-symbol function_parameters) [10546 10554])
                            ("filename" variable nil (reparse-symbol function_parameters) [10556 10564])
                            ("lineno" variable nil (reparse-symbol function_parameters) [10566 10572])
                            ("file" variable nil (reparse-symbol function_parameters) [10574 10578])
                            ("line" variable nil (reparse-symbol function_parameters) [10605 10609]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10518 10814])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10831 10835]))                          )
                        (reparse-symbol indented_block_body) [10819 11062]))                  
                :type "class")
                nil [10313 11062])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11821 12061])
                            ("self" variable nil (reparse-symbol indented_block_body) [12070 12091])
                            ("module" code nil (reparse-symbol indented_block_body) [12162 12168])
                            ("self" variable nil (reparse-symbol indented_block_body) [12177 12198]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11779 11783])
                            ("record" variable nil (reparse-symbol function_parameters) [11785 11791])
                            ("module" variable nil (reparse-symbol function_parameters) [11799 11805]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11766 12199])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12217 12221]))                          )
                        (reparse-symbol indented_block_body) [12204 12499])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12518 12522]))                          )
                        (reparse-symbol indented_block_body) [12504 13053])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13071 13075])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [13077 13086]))                          )
                        (reparse-symbol indented_block_body) [13058 13296]))                  
                :type "class")
                nil [11064 13296])
            ("_warnings_defaults" variable nil nil [13748 13774])
            ("try" code nil nil [13775 14083])
            ("_processoptions" code nil nil [14109 14141])
            ("if" code nil nil [14142 14726])
            ("del" code nil nil [14726 14748]))          
      :file "warnings.py"
      :pointmax 14749
      :fsize 14748
      :lastmodtime '(24343 10971 0 0)
      :unmatched-syntax '((NAME 12100 . 12104) (IF 12139 . 12141) (ELSE 12157 . 12161) (NAME 10752 . 10756) (IF 10792 . 10794) (ELSE 10804 . 10808) (NAME 1681 . 1685) (IF 1724 . 1726) (ELSE 1740 . 1744)))
    (semanticdb-table "semanticdb-table-e58664"
      :major-mode python-mode
      :tags 
        '( ("__doc__" variable nil nil [122 2181])
            ("__always_supported" variable nil nil [2293 2369])
            ("algorithms_guaranteed" variable nil nil [2371 2418])
            ("algorithms_available" variable nil nil [2419 2465])
            ("algorithms" variable nil nil [2467 2498])
            ("__all__" code nil nil [2500 2680])
            ("__get_builtin_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [2713 2717]))              ) nil [2683 3549])
            ("__get_openssl_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3581 3585]))              ) nil [3551 3958])
            ("__py_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3973 3977])
                    ("string" variable nil (reparse-symbol function_parameters) [3979 3985]))                  )
                nil [3960 4177])
            ("__hash_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4194 4198])
                    ("string" variable nil (reparse-symbol function_parameters) [4200 4206]))                  )
                nil [4179 4739])
            ("try" code nil nil [4741 5007])
            ("for" code nil nil [5008 5335])
            ("try" code nil nil [5337 7723])
            ("del" code nil nil [7743 7790])
            ("del" code nil nil [7791 7842]))          
      :file "hashlib.py"
      :pointmax 7843
      :fsize 7842
      :lastmodtime '(24343 10970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-e67280"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"" code nil nil [1 66])
            ("sys" include nil nil [68 86])
            ("try" code nil nil [88 172])
            ("warnings" include nil nil [173 188])
            ("collections" include nil nil [190 229])
            ("itertools" include nil nil [230 267])
            ("time" include nil nil [268 315])
            ("traceback" include nil nil [316 363])
            ("__all__" variable nil nil [944 1206])
            ("_start_new_thread" variable nil nil [1208 1251])
            ("_allocate_lock" variable nil nil [1252 1289])
            ("_get_ident" variable nil nil [1290 1319])
            ("ThreadError" variable nil nil [1320 1346])
            ("del" code nil nil [1347 1357])
            ("warnings" code nil nil [1472 1603])
            ("_VERBOSE" variable nil nil [1886 1902])
            ("if" code nil nil [1904 2827])
            ("_profile_hook" variable nil nil [2867 2887])
            ("_trace_hook" variable nil nil [2888 2906])
            ("setprofile" function
               (:documentation "Set a profile function for all threads started from the threading module.

    The func will be passed to sys.setprofile() for each thread, before its
    run() method is called.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [2923 2927]))                  )
                nil [2908 3175])
            ("settrace" function
               (:documentation "Set a trace function for all threads started from the threading module.

    The func will be passed to sys.settrace() for each thread, before its run()
    method is called.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [3189 3193]))                  )
                nil [3176 3433])
            ("Lock" variable nil nil [3461 3482])
            ("RLock" function
               (:documentation "Factory function that returns a new reentrant lock.

    A reentrant lock must be released by the thread that acquired it. Once a
    thread has acquired a reentrant lock, the same thread may acquire it again
    without blocking; the thread must release it once for each time it has
    acquired it.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [3494 3499])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [3501 3509]))                  )
                nil [3484 3864])
            ("_RLock" type
               (:documentation "A reentrant lock must be released by the thread that acquired it. Once a
       thread has acquired a reentrant lock, the same thread may acquire it
       again without blocking; the thread must release it once for each time it
       has acquired it.
    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [4204 4236])
                            ("self" variable nil (reparse-symbol indented_block_body) [4245 4276])
                            ("self" variable nil (reparse-symbol indented_block_body) [4285 4304])
                            ("self" variable nil (reparse-symbol indented_block_body) [4313 4329]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4175 4179])
                            ("verbose" variable nil (reparse-symbol function_parameters) [4181 4188]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4162 4330])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4348 4352]))                          )
                        (reparse-symbol indented_block_body) [4335 4585])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4602 4606])
                            ("blocking" variable nil (reparse-symbol function_parameters) [4608 4616]))                          
                        :documentation "Acquire a lock, blocking or non-blocking.

        When invoked without arguments: if this thread already owns the lock,
        increment the recursion level by one, and return immediately. Otherwise,
        if another thread owns the lock, block until the lock is unlocked. Once
        the lock is unlocked (not owned by any thread), then grab ownership, set
        the recursion level to one, and return. If more than one thread is
        blocked waiting until the lock is unlocked, only one at a time will be
        able to grab ownership of the lock. There is no return value in this
        case.

        When invoked with the blocking argument set to true, do the same thing
        as when called without arguments, and return true.

        When invoked with the blocking argument set to false, do not block. If a
        call without an argument would block, return false immediately;
        otherwise, do the same thing as when called without arguments, and
        return true.

        ")
                        (reparse-symbol indented_block_body) [4590 6220])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [6225 6244])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6262 6266]))                          
                        :documentation "Release a lock, decrementing the recursion level.

        If after the decrement it is zero, reset the lock to unlocked (not owned
        by any thread), and if any other threads are blocked waiting for the
        lock to become unlocked, allow exactly one of them to proceed. If after
        the decrement the recursion level is still nonzero, the lock remains
        locked and owned by the calling thread.

        Only call this method when the calling thread owns the lock. A
        RuntimeError is raised if this method is called when the lock is
        unlocked.

        There is no return value.

        ")
                        (reparse-symbol indented_block_body) [6250 7347])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7365 7369])
                            ("t" variable nil (reparse-symbol function_parameters) [7371 7372])
                            ("v" variable nil (reparse-symbol function_parameters) [7374 7375])
                            ("tb" variable nil (reparse-symbol function_parameters) [7377 7379]))                          )
                        (reparse-symbol indented_block_body) [7352 7405])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7483 7487])
                            ("count_owner" variable nil (reparse-symbol function_parameters) [7489 7500]))                          )
                        (reparse-symbol indented_block_body) [7462 7703])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7726 7730]))                          )
                        (reparse-symbol indented_block_body) [7708 7978])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7997 8001]))                          )
                        (reparse-symbol indented_block_body) [7983 8048]))                  
                :type "class")
                nil [3865 8048])
            ("Condition" function
               (:documentation "Factory function that returns a new condition variable object.

    A condition variable allows one or more threads to wait until they are
    notified by another thread.

    If the lock argument is given and not None, it must be a Lock or RLock
    object, and it is used as the underlying lock. Otherwise, a new RLock object
    is created and used as the underlying lock.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [8064 8069])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [8071 8079]))                  )
                nil [8050 8513])
            ("_Condition" type
               (:documentation "Condition variables allow one or more threads to wait until they are
       notified by another thread.
    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [8719 8751])
                            ("if" code nil (reparse-symbol indented_block_body) [8760 8804])
                            ("self" variable nil (reparse-symbol indented_block_body) [8812 8830])
                            ("self" variable nil (reparse-symbol indented_block_body) [8899 8926])
                            ("self" variable nil (reparse-symbol indented_block_body) [8935 8962])
                            ("try" code nil (reparse-symbol indented_block_body) [9186 9291])
                            ("try" code nil (reparse-symbol indented_block_body) [9299 9410])
                            ("try" code nil (reparse-symbol indented_block_body) [9418 9515])
                            ("self" variable nil (reparse-symbol indented_block_body) [9523 9542]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8679 8683])
                            ("lock" variable nil (reparse-symbol function_parameters) [8685 8689])
                            ("verbose" variable nil (reparse-symbol function_parameters) [8696 8703]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8666 9543])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9562 9566]))                          )
                        (reparse-symbol indented_block_body) [9548 9608])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9626 9630])
                            ("args" variable nil (reparse-symbol function_parameters) [9632 9637]))                          )
                        (reparse-symbol indented_block_body) [9613 9683])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9701 9705]))                          )
                        (reparse-symbol indented_block_body) [9688 9782])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9805 9809]))                          )
                        (reparse-symbol indented_block_body) [9787 9871])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9897 9901])
                            ("x" variable nil (reparse-symbol function_parameters) [9903 9904]))                          )
                        (reparse-symbol indented_block_body) [9876 9968])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9987 9991]))                          )
                        (reparse-symbol indented_block_body) [9973 10257])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10271 10275])
                            ("timeout" variable nil (reparse-symbol function_parameters) [10277 10284]))                          
                        :documentation "Wait until notified or until a timeout occurs.

        If the calling thread has not acquired the lock when this method is
        called, a RuntimeError is raised.

        This method releases the underlying lock, and then blocks until it is
        awakened by a notify() or notifyAll() call for the same condition
        variable in another thread, or until the optional timeout occurs. Once
        awakened or timed out, it re-acquires the lock and returns.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        When the underlying lock is an RLock, it is not released using its
        release() method, since this may not actually unlock the lock when it
        was acquired multiple times recursively. Instead, an internal interface
        of the RLock class is used, which really unlocks it even when it has
        been recursively acquired several times. Another internal interface is
        then used to restore the recursion level when the lock is reacquired.

        ")
                        (reparse-symbol indented_block_body) [10262 13224])
                    ("notify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13240 13244])
                            ("n" variable nil (reparse-symbol function_parameters) [13246 13247]))                          
                        :documentation "Wake up one or more threads waiting on this condition, if any.

        If the calling thread has not acquired the lock when this method is
        called, a RuntimeError is raised.

        This method wakes up at most n of the threads waiting for the condition
        variable; it is a no-op if no threads are waiting.

        ")
                        (reparse-symbol indented_block_body) [13229 14170])
                    ("notifyAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14189 14193]))                          
                        :documentation "Wake up all threads waiting on this condition.

        If the calling thread has not acquired the lock when this method
        is called, a RuntimeError is raised.

        ")
                        (reparse-symbol indented_block_body) [14175 14427])
                    ("notify_all" variable nil (reparse-symbol indented_block_body) [14432 14454]))                  
                :type "class")
                nil [8514 14455])
            ("Semaphore" function
               (:documentation "A factory function that returns a new semaphore.

    Semaphores manage a counter representing the number of release() calls minus
    the number of acquire() calls, plus an initial value. The acquire() method
    blocks if necessary until it can return without making the counter
    negative. If not given, value defaults to 1.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [14471 14476])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14478 14486]))                  )
                nil [14457 14874])
            ("_Semaphore" type
               (:documentation "Semaphores manage a counter representing the number of release() calls
       minus the number of acquire() calls, plus an initial value. The acquire()
       method blocks if necessary until it can return without making the counter
       negative. If not given, value defaults to 1.

    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [15338 15421])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [15429 15461])
                            ("self" variable nil (reparse-symbol indented_block_body) [15470 15501])
                            ("self" variable nil (reparse-symbol indented_block_body) [15510 15530]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15300 15304])
                            ("value" variable nil (reparse-symbol function_parameters) [15306 15311])
                            ("verbose" variable nil (reparse-symbol function_parameters) [15315 15322]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15287 15531])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15548 15552])
                            ("blocking" variable nil (reparse-symbol function_parameters) [15554 15562]))                          
                        :documentation "Acquire a semaphore, decrementing the internal counter by one.

        When invoked without arguments: if the internal counter is larger than
        zero on entry, decrement it by one and return immediately. If it is zero
        on entry, block, waiting until some other thread has called release() to
        make it larger than zero. This is done with proper interlocking so that
        if multiple acquire() calls are blocked, release() will wake exactly one
        of them up. The implementation may pick one at random, so the order in
        which blocked threads are awakened should not be relied on. There is no
        return value in this case.

        When invoked with blocking set to true, do the same thing as when called
        without arguments, and return true.

        When invoked with blocking set to false, do not block. If a call without
        an argument would block, return false immediately; otherwise, do the
        same thing as when called without arguments, and return true.

        ")
                        (reparse-symbol indented_block_body) [15536 17198])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [17203 17222])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17240 17244]))                          
                        :documentation "Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        ")
                        (reparse-symbol indented_block_body) [17228 17710])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17728 17732])
                            ("t" variable nil (reparse-symbol function_parameters) [17734 17735])
                            ("v" variable nil (reparse-symbol function_parameters) [17737 17738])
                            ("tb" variable nil (reparse-symbol function_parameters) [17740 17742]))                          )
                        (reparse-symbol indented_block_body) [17715 17768]))                  
                :type "class")
                nil [14875 17768])
            ("BoundedSemaphore" function
               (:documentation "A factory function that returns a new bounded semaphore.

    A bounded semaphore checks to make sure its current value doesn't exceed its
    initial value. If it does, ValueError is raised. In most situations
    semaphores are used to guard resources with limited capacity.

    If the semaphore is released too many times it's a sign of a bug. If not
    given, value defaults to 1.

    Like regular semaphores, bounded semaphores manage a counter representing
    the number of release() calls minus the number of acquire() calls, plus an
    initial value. The acquire() method blocks if necessary until it can return
    without making the counter negative. If not given, value defaults to 1.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [17791 17796])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [17798 17806]))                  )
                nil [17770 18572])
            ("_BoundedSemaphore" type
               (:documentation "A bounded semaphore checks to make sure its current value doesn't exceed
       its initial value. If it does, ValueError is raised. In most situations
       semaphores are used to guard resources with limited capacity.
    "
                :superclasses ("_Semaphore")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Semaphore" code nil (reparse-symbol indented_block_body) [18902 18943])
                            ("self" variable nil (reparse-symbol indented_block_body) [18952 18979]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18864 18868])
                            ("value" variable nil (reparse-symbol function_parameters) [18870 18875])
                            ("verbose" variable nil (reparse-symbol function_parameters) [18879 18886]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18851 18980])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18997 19001]))                          
                        :documentation "Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        If the number of releases exceeds the number of acquires,
        raise a ValueError.

        ")
                        (reparse-symbol indented_block_body) [18985 19580]))                  
                :type "class")
                nil [18573 19580])
            ("Event" function
               (:documentation "A factory function that returns a new event.

    Events manage a flag that can be set to true with the set() method and reset
    to false with the clear() method. The wait() method blocks until the flag is
    true.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [19592 19597])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [19599 19607]))                  )
                nil [19582 19879])
            ("_Event" type
               (:documentation "A factory function that returns a new event object. An event manages a
       flag that can be set to true with the set() method and reset to false
       with the clear() method. The wait() method blocks until the flag is true.

    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [20255 20287])
                            ("self" variable nil (reparse-symbol indented_block_body) [20296 20327])
                            ("self" variable nil (reparse-symbol indented_block_body) [20336 20355]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20226 20230])
                            ("verbose" variable nil (reparse-symbol function_parameters) [20232 20239]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20213 20356])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20387 20391]))                          )
                        (reparse-symbol indented_block_body) [20361 20507])
                    ("isSet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20522 20526]))                          )
                        (reparse-symbol indented_block_body) [20512 20620])
                    ("is_set" variable nil (reparse-symbol indented_block_body) [20625 20639])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20653 20657]))                          
                        :documentation "Set the internal flag to true.

        All threads waiting for the flag to become true are awakened. Threads
        that call wait() once the flag is true will not block at all.

        ")
                        (reparse-symbol indented_block_body) [20645 20958])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20973 20977]))                          
                        :documentation "Reset the internal flag to false.

        Subsequently, threads calling wait() will block until set() is called to
        set the internal flag to true again.

        ")
                        (reparse-symbol indented_block_body) [20963 21223])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21237 21241])
                            ("timeout" variable nil (reparse-symbol function_parameters) [21243 21250]))                          
                        :documentation "Block until the internal flag is true.

        If the internal flag is true on entry, return immediately. Otherwise,
        block until another thread calls set() to set the flag to true, or until
        the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        This method returns the internal flag on exit, so it will always return
        True except if a timeout is given and the operation times out.

        ")
                        (reparse-symbol indented_block_body) [21228 21988]))                  
                :type "class")
                nil [19880 21988])
            ("_counter" variable nil nil [22027 22051])
            ("_counter" code nil nil [22052 22062])
            ("_newname" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [22123 22131]))              ) nil [22110 22179])
            ("_active_limbo_lock" variable nil nil [22211 22248])
            ("_active" variable nil nil [22249 22261])
            ("_limbo" variable nil nil [22299 22310])
            ("Thread" type
               (:documentation "A class that represents a thread of control.

    This class can be safely subclassed in a limited fashion.

    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__initialized" variable nil (reparse-symbol indented_block_body) [22491 22512])
                    ("__exc_info" variable nil (reparse-symbol indented_block_body) [22763 22789])
                    ("__exc_clear" variable nil (reparse-symbol indented_block_body) [22892 22920])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form \"Thread-N\" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

\"\"\"" code nil (reparse-symbol indented_block_body) [23043 23884])
                            ("assert" code nil (reparse-symbol indented_block_body) [23893 23952])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [23961 23993])
                            ("if" code nil (reparse-symbol indented_block_body) [24002 24045])
                            ("self" variable nil (reparse-symbol indented_block_body) [24053 24075])
                            ("self" variable nil (reparse-symbol indented_block_body) [24084 24121])
                            ("self" variable nil (reparse-symbol indented_block_body) [24130 24148])
                            ("self" variable nil (reparse-symbol indented_block_body) [24157 24179])
                            ("self" variable nil (reparse-symbol indented_block_body) [24188 24224])
                            ("self" variable nil (reparse-symbol indented_block_body) [24233 24252])
                            ("self" variable nil (reparse-symbol indented_block_body) [24261 24285])
                            ("self" variable nil (reparse-symbol indented_block_body) [24294 24316])
                            ("self" variable nil (reparse-symbol indented_block_body) [24325 24357])
                            ("self" variable nil (reparse-symbol indented_block_body) [24366 24391])
                            ("self" variable nil (reparse-symbol indented_block_body) [24518 24545]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22939 22943])
                            ("group" variable nil (reparse-symbol function_parameters) [22945 22950])
                            ("target" variable nil (reparse-symbol function_parameters) [22957 22963])
                            ("name" variable nil (reparse-symbol function_parameters) [22970 22974])
                            ("args" variable nil (reparse-symbol function_parameters) [22998 23002])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23007 23013])
                            ("verbose" variable nil (reparse-symbol function_parameters) [23020 23027]))                          
                        :documentation "This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form \"Thread-N\" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22926 24546])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24577 24581]))                          )
                        (reparse-symbol indented_block_body) [24551 24896])
                    ("_block" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24926 24930]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24901 24990])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25011 25015]))                          )
                        (reparse-symbol indented_block_body) [24995 25110])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25128 25132]))                          )
                        (reparse-symbol indented_block_body) [25115 25576])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25591 25595]))                          
                        :documentation "Start the thread's activity.

        It must be called at most once per thread object. It arranges for the
        object's run() method to be invoked in a separate thread of control.

        This method will raise a RuntimeError if called more than once on the
        same thread object.

        ")
                        (reparse-symbol indented_block_body) [25581 26471])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26484 26488]))                          
                        :documentation "Method representing the thread's activity.

        You may override this method in a subclass. The standard run() method
        invokes the callable object passed to the object's constructor as the
        target argument, if any, with sequential and keyword arguments taken
        from the args and kwargs arguments, respectively.

        ")
                        (reparse-symbol indented_block_body) [26476 27172])
                    ("__bootstrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27193 27197]))                          )
                        (reparse-symbol indented_block_body) [27177 28176])
                    ("_set_ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28196 28200]))                          )
                        (reparse-symbol indented_block_body) [28181 28239])
                    ("__bootstrap_inner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28266 28270]))                          )
                        (reparse-symbol indented_block_body) [28244 31677])
                    ("__stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31693 31697]))                          )
                        (reparse-symbol indented_block_body) [31682 32020])
                    ("__delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32038 32042]))                          )
                        (reparse-symbol indented_block_body) [32025 33839])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33853 33857])
                            ("timeout" variable nil (reparse-symbol function_parameters) [33859 33866]))                          
                        :documentation "Wait until the thread terminates.

        This blocks the calling thread until the thread whose join() method is
        called terminates -- either normally or through an unhandled exception
        or until the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof). As join() always returns None, you must call
        isAlive() after join() to decide whether a timeout happened -- if the
        thread is still alive, the join() call timed out.

        When the timeout argument is not present or None, the operation will
        block until the thread terminates.

        A thread can be join()ed many times.

        join() raises a RuntimeError if an attempt is made to join the current
        thread as that would cause a deadlock. It is also an error to join() a
        thread before it has been started and attempts to do so raises the same
        exception.

        ")
                        (reparse-symbol indented_block_body) [33844 36173])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36201 36205]))                          
                        :documentation "A string used for identification purposes only.

        It has no semantics. Multiple threads may be given the same name. The
        initial name is set by the constructor.

        ")
                        (reparse-symbol indented_block_body) [36178 36500])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36531 36535])
                            ("name" variable nil (reparse-symbol function_parameters) [36537 36541]))                          
                        :decorators 
                          ( ("name.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [36505 36642])
                    ("ident" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36671 36675]))                          
                        :documentation "Thread identifier of this thread or None if it has not been started.

        This is a nonzero integer. See the thread.get_ident() function. Thread
        identifiers may be recycled when a thread exits and another thread is
        created. The identifier is available even after the thread has exited.

        ")
                        (reparse-symbol indented_block_body) [36647 37102])
                    ("isAlive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37119 37123]))                          
                        :documentation "Return whether the thread is alive.

        This method returns True just before the run() method starts until just
        after the run() method terminates. The module function enumerate()
        returns a list of all alive threads.

        ")
                        (reparse-symbol indented_block_body) [37107 37515])
                    ("is_alive" variable nil (reparse-symbol indented_block_body) [37520 37538])
                    ("daemon" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37569 37573]))                          
                        :documentation "A boolean value indicating whether this thread is a daemon thread (True) or not (False).

        This must be set before start() is called, otherwise RuntimeError is
        raised. Its initial value is inherited from the creating thread; the
        main thread is not a daemon thread and therefore all threads created in
        the main thread default to daemon = False.

        The entire Python program exits when no alive non-daemon threads are
        left.

        ")
                        (reparse-symbol indented_block_body) [37544 38164])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38199 38203])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [38205 38213]))                          
                        :decorators 
                          ( ("daemon.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38169 38462])
                    ("isDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38480 38484]))                          )
                        (reparse-symbol indented_block_body) [38467 38514])
                    ("setDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38533 38537])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [38539 38547]))                          )
                        (reparse-symbol indented_block_body) [38519 38581])
                    ("getName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38598 38602]))                          )
                        (reparse-symbol indented_block_body) [38586 38630])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38647 38651])
                            ("name" variable nil (reparse-symbol function_parameters) [38653 38657]))                          )
                        (reparse-symbol indented_block_body) [38635 38685]))                  
                :type "class")
                nil [22339 38685])
            ("Timer" function
               (:documentation "Factory function to create a Timer object.

    Timers call a function after a specified number of seconds:

        t = Timer(30.0, f, args=[], kwargs={})
        t.start()
        t.cancel()     # stop the timer's action if it's still waiting

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [38757 38762])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [38764 38772]))                  )
                nil [38747 39071])
            ("_Timer" type
               (:documentation "Call a function after a specified number of seconds:

            t = Timer(30.0, f, args=[], kwargs={})
            t.start()
            t.cancel()     # stop the timer's action if it's still waiting

    "
                :superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [39385 39406])
                            ("self" variable nil (reparse-symbol indented_block_body) [39415 39439])
                            ("self" variable nil (reparse-symbol indented_block_body) [39448 39472])
                            ("self" variable nil (reparse-symbol indented_block_body) [39481 39497])
                            ("self" variable nil (reparse-symbol indented_block_body) [39506 39526])
                            ("self" variable nil (reparse-symbol indented_block_body) [39535 39558]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39330 39334])
                            ("interval" variable nil (reparse-symbol function_parameters) [39336 39344])
                            ("function" variable nil (reparse-symbol function_parameters) [39346 39354])
                            ("args" variable nil (reparse-symbol function_parameters) [39356 39360])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39365 39371]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39317 39559])
                    ("cancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39575 39579]))                          
                        :documentation "Stop the timer if it hasn't finished yet")
                        (reparse-symbol indented_block_body) [39564 39665])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39678 39682]))                          )
                        (reparse-symbol indented_block_body) [39670 39847]))                  
                :type "class")
                nil [39072 39847])
            ("_MainThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [40013 40053])
                            ("self" code nil (reparse-symbol indented_block_body) [40062 40089])
                            ("self" code nil (reparse-symbol indented_block_body) [40098 40115])
                            ("with" code nil (reparse-symbol indented_block_body) [40124 40190]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39998 40002]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39985 40190])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40211 40215]))                          )
                        (reparse-symbol indented_block_body) [40195 40239])
                    ("_exitfunc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40258 40262]))                          )
                        (reparse-symbol indented_block_body) [40244 40617]))                  
                :type "class")
                nil [39953 40617])
            ("_pickSomeNonDaemonThread" function nil nil [40618 40755])
            ("_DummyThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [41254 41302])
                            ("del" code nil (reparse-symbol indented_block_body) [41522 41545])
                            ("self" code nil (reparse-symbol indented_block_body) [41555 41582])
                            ("self" code nil (reparse-symbol indented_block_body) [41591 41608])
                            ("with" code nil (reparse-symbol indented_block_body) [41617 41683]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41239 41243]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41226 41683])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41704 41708]))                          )
                        (reparse-symbol indented_block_body) [41688 41731])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41745 41749])
                            ("timeout" variable nil (reparse-symbol function_parameters) [41751 41758]))                          )
                        (reparse-symbol indented_block_body) [41736 41817]))                  
                :type "class")
                nil [41193 41817])
            ("currentThread" function (:documentation "Return the current Thread object, corresponding to the caller's thread of control.

    If the caller's thread of control was not created through the threading
    module, a dummy thread object with limited functionality is returned.

    ") nil [41843 42283])
            ("current_thread" variable nil nil [42284 42314])
            ("activeCount" function (:documentation "Return the number of Thread objects currently alive.

    The returned count is equal to the length of the list returned by
    enumerate().

    ") nil [42316 42563])
            ("active_count" variable nil nil [42564 42590])
            ("_enumerate" function nil nil [42592 42724])
            ("enumerate" function (:documentation "Return a list of all Thread objects currently alive.

    The list includes daemonic threads, dummy thread objects created by
    current_thread(), and the main thread. It excludes terminated threads and
    threads that have not yet been started.

    ") nil [42725 43085])
            ("thread" include nil nil [43086 43115])
            ("_shutdown" variable nil nil [43231 43266])
            ("try" code nil nil [43365 43468])
            ("_after_fork" function nil nil [43470 44846])
            ("_test" function nil nil [44866 47093])
            ("if" code nil nil [47094 47133]))          
      :file "threading.py"
      :pointmax 47133
      :fsize 47132
      :lastmodtime '(24343 10971 0 0)
      :unmatched-syntax '((INDENT_BLOCK 31326 . 31361) (NEWLINE 31110 . 31111) (COLON 31109 . 31110) (FINALLY 31102 . 31109)))
    (semanticdb-table "semanticdb-table-e6b604"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"RFC 3548: Base16, Base32, Base64 Data Encodings\"\"\"" code nil nil [24 77])
            ("re" include nil nil [209 218])
            ("struct" include nil nil [219 232])
            ("string" include nil nil [233 246])
            ("binascii" include nil nil [247 262])
            ("__all__" variable nil nil [265 839])
            ("_translation" variable nil nil [841 886])
            ("EMPTYSTRING" variable nil nil [887 903])
            ("_translate" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [921 922])
                ("altchars" variable nil (reparse-symbol function_parameters) [924 932]))              ) nil [906 1080])
            ("b64encode" function
               (:documentation "Encode a string using Base64.

    s is the string to encode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.

    The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1140 1141])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1143 1151]))                  )
                nil [1126 1733])
            ("b64decode" function
               (:documentation "Decode a Base64 encoded string.

    s is the string to decode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies the
    alternative alphabet used instead of the '+' and '/' characters.

    The decoded string is returned.  A TypeError is raised if s is
    incorrectly padded.  Characters that are neither in the normal base-64
    alphabet nor the alternative alphabet are discarded prior to the padding
    check.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1749 1750])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1752 1760]))                  )
                nil [1735 2514])
            ("standard_b64encode" function
               (:documentation "Encode a string using the standard Base64 alphabet.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2539 2540]))                  )
                nil [2516 2699])
            ("standard_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    Argument s is the string to decode.  The decoded string is returned.  A
    TypeError is raised if the string is incorrectly padded.  Characters that
    are not in the standard alphabet are discarded prior to the padding
    check.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2723 2724]))                  )
                nil [2700 3063])
            ("_urlsafe_encode_translation" variable nil nil [3064 3124])
            ("_urlsafe_decode_translation" variable nil nil [3125 3185])
            ("urlsafe_b64encode" function
               (:documentation "Encode a string using the URL- and filesystem-safe Base64 alphabet.

    Argument s is the string to encode.  The encoded string is returned.  The
    alphabet uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3209 3210]))                  )
                nil [3187 3499])
            ("urlsafe_b64decode" function
               (:documentation "Decode a string using the URL- and filesystem-safe Base64 alphabet.

    Argument s is the string to decode.  The decoded string is returned.  A
    TypeError is raised if the string is incorrectly padded.  Characters that
    are not in the URL-safe base-64 alphabet, and are not a plus '+' or slash
    '/', are discarded prior to the padding check.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3522 3523]))                  )
                nil [3500 4022])
            ("_b32alphabet" variable nil nil [4076 4413])
            ("_b32tab" variable nil nil [4415 4445])
            ("_b32tab" code nil nil [4446 4460])
            ("_b32tab" variable nil nil [4461 4494])
            ("_b32rev" variable nil nil [4495 4558])
            ("b32encode" function
               (:documentation "Encode a string using Base32.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4575 4576]))                  )
                nil [4561 6338])
            ("b32decode" function
               (:documentation "Decode a Base32 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O
    (oh), and for optional mapping of the digit 1 (one) to either the letter I
    (eye) or letter L (el).  The optional argument map01 when not None,
    specifies which letter the digit 1 should be mapped to (when map01 is not
    None, the digit 0 is always mapped to the letter O).  For security
    purposes the default is None, so that 0 and 1 are not allowed in the
    input.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6354 6355])
                    ("casefold" variable nil (reparse-symbol function_parameters) [6357 6365])
                    ("map01" variable nil (reparse-symbol function_parameters) [6373 6378]))                  )
                nil [6340 8837])
            ("b16encode" function
               (:documentation "Encode a string using Base16.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9011 9012]))                  )
                nil [8997 9164])
            ("b16decode" function
               (:documentation "Decode a Base16 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    The decoded string is returned.  A TypeError is raised if s is
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9180 9181])
                    ("casefold" variable nil (reparse-symbol function_parameters) [9183 9191]))                  )
                nil [9166 9740])
            ("MAXLINESIZE" variable nil nil [9903 9919])
            ("MAXBINSIZE" code nil nil [9941 9972])
            ("encode" function
               (:documentation "Encode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9985 9990])
                    ("output" variable nil (reparse-symbol function_parameters) [9992 9998]))                  )
                nil [9974 10325])
            ("decode" function
               (:documentation "Decode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [10338 10343])
                    ("output" variable nil (reparse-symbol function_parameters) [10345 10351]))                  )
                nil [10327 10528])
            ("encodestring" function
               (:documentation "Encode a string into multiple lines of base-64 data."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10547 10548]))                  )
                nil [10530 10788])
            ("decodestring" function
               (:documentation "Decode a string."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10807 10808]))                  )
                nil [10790 10872])
            ("test" function (:documentation "Small test program") nil [10901 11642])
            ("test1" function nil nil [11644 11767])
            ("if" code nil nil [11769 11807]))          
      :file "base64.py"
      :pointmax 11807
      :fsize 11806
      :lastmodtime '(24343 11061 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-e7b43c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Parse (absolute and relative) URLs.

urlparse module is based upon the following RFC specifications.

RFC 3986 (STD66): \"Uniform Resource Identifiers\" by T. Berners-Lee, R. Fielding
and L.  Masinter, January 2005.

RFC 2732 : \"Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter
and L.Masinter, December 1999.

RFC 2396:  \"Uniform Resource Identifiers (URI)\": Generic Syntax by T.
Berners-Lee, R. Fielding, and L. Masinter, August 1998.

RFC 2368: \"The mailto URL scheme\", by P.Hoffman , L Masinter, J. Zwinski, July 1998.

RFC 1808: \"Relative Uniform Resource Locators\", by R. Fielding, UC Irvine, June
1995.

RFC 1738: \"Uniform Resource Locators (URL)\" by T. Berners-Lee, L. Masinter, M.
McCahill, December 1994

RFC 3986 is considered the current standard and any future changes to
urlparse module should conform with it.  The urlparse module is
currently not entirely compliant with this RFC due to defacto
scenarios for parsing, and for backward compatibility purposes, some
parsing quirks from older RFCs are retained. The testcases in
test_urlparse.py provides a good indicator of parsing behavior.

\"\"\"" code nil nil [1 1130])
            ("re" include nil nil [1132 1141])
            ("__all__" variable nil nil [1143 1265])
            ("uses_relative" variable nil nil [1325 1533])
            ("uses_netloc" variable nil nil [1534 1785])
            ("uses_params" variable nil nil [1786 1948])
            ("non_hierarchical" variable nil nil [2094 2218])
            ("uses_query" variable nil nil [2219 2341])
            ("uses_fragment" variable nil nil [2342 2499])
            ("scheme_chars" variable nil nil [2536 2677])
            ("MAX_CACHE_SIZE" variable nil nil [2679 2698])
            ("_parse_cache" variable nil nil [2699 2716])
            ("clear_cache" function (:documentation "Clear the parse cache.") nil [2718 2795])
            ("ResultMixin" type
               (:documentation "Shared methods for the parsed result objects."
                :superclasses ("object")
                :members 
                  ( ("username" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2912 2916]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2885 3155])
                    ("password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3187 3191]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3160 3398])
                    ("hostname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3430 3434]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3403 3752])
                    ("port" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3780 3784]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3757 4099]))                  
                :type "class")
                nil [2797 4099])
            ("collections" include nil nil [4100 4134])
            ("SplitResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4237 4251])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4268 4272]))                          )
                        (reparse-symbol indented_block_body) [4257 4307]))                  
                :type "class")
                nil [4136 4307])
            ("ParseResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4417 4431])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4448 4452]))                          )
                        (reparse-symbol indented_block_body) [4437 4487]))                  
                :type "class")
                nil [4309 4487])
            ("urlparse" function
               (:documentation "Parse a URL into 6 components:
    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [4502 4505])
                    ("scheme" variable nil (reparse-symbol function_parameters) [4507 4513])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [4518 4533]))                  )
                nil [4489 5127])
            ("_splitparams" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5145 5148]))              ) nil [5128 5324])
            ("_splitnetloc" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5342 5345])
                ("start" variable nil (reparse-symbol function_parameters) [5347 5352]))              ) nil [5325 5773])
            ("_checknetloc" function (:arguments 
              ( ("netloc" variable nil (reparse-symbol function_parameters) [5791 5797]))              ) nil [5774 6505])
            ("urlsplit" function
               (:documentation "Parse a URL into 5 components:
    <scheme>://<netloc>/<path>?<query>#<fragment>
    Return a 5-tuple: (scheme, netloc, path, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [6519 6522])
                    ("scheme" variable nil (reparse-symbol function_parameters) [6524 6530])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [6535 6550]))                  )
                nil [6506 8800])
            ("urlunparse" function
               (:documentation "Put a parsed URL back together again.  This may result in a
    slightly different, but equivalent URL, if the URL that was parsed
    originally had redundant delimiters, e.g. a ? with an empty query
    (the draft states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [8816 8820]))                  )
                nil [8801 9255])
            ("urlunsplit" function
               (:documentation "Combine the elements of a tuple as returned by urlsplit() into a
    complete URL as a string. The data argument can be any five-item iterable.
    This may result in a slightly different, but equivalent URL, if the URL that
    was parsed originally had unnecessary delimiters (for example, a ? with an
    empty query; the RFC states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [9271 9275]))                  )
                nil [9256 10027])
            ("urljoin" function
               (:documentation "Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [10040 10044])
                    ("url" variable nil (reparse-symbol function_parameters) [10046 10049])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [10051 10066]))                  )
                nil [10028 11830])
            ("urldefrag" function
               (:documentation "Removes any existing fragment from URL.

    Returns a tuple of the defragmented URL and the fragment.  If
    the URL contained no fragments, the second element is the
    empty string.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [11845 11848]))                  )
                nil [11831 12226])
            ("try" code nil nil [12227 12371])
            ("_hexdig" variable nil nil [12651 12685])
            ("_hextochr" variable nil nil [12686 12778])
            ("_asciire" variable nil nil [12779 12818])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12832 12833]))                  )
                nil [12820 13525])
            ("parse_qs" function
               (:documentation "Parse a query given as a string argument.

        Arguments:

        qs: percent-encoded query string to be parsed

        keep_blank_values: flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.

        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [13539 13541])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [13543 13560])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [13564 13578]))                  )
                nil [13526 14496])
            ("parse_qsl" function
               (:documentation "Parse a query given as a string argument.

    Arguments:

    qs: percent-encoded query string to be parsed

    keep_blank_values: flag indicating whether blank values in
        percent-encoded queries should be treated as blank strings.  A
        true value indicates that blanks should be retained as blank
        strings.  The default false value indicates that blank values
        are to be ignored and treated as if they were  not included.

    strict_parsing: flag indicating what to do with parsing errors. If
        false (the default), errors are silently ignored. If true,
        errors raise a ValueError exception.

    Returns a list, as G-d intended.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [14511 14513])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [14515 14532])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [14536 14550]))                  )
                nil [14497 15955]))          
      :file "urlparse.py"
      :pointmax 15955
      :fsize 15954
      :lastmodtime '(24343 10971 0 0)
      :unmatched-syntax '((COMMA 4396 . 4397) (NAME 4327 . 4337) (PAREN_BLOCK 4337 . 4396) (COMMA 4216 . 4217) (NAME 4154 . 4164) (PAREN_BLOCK 4164 . 4216)))
    (semanticdb-table "semanticdb-table-e9caec"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997])
            ("__all__" variable nil nil [2042 2094]))          
      :file "types.py"
      :pointmax 2095
      :fsize 2094
      :lastmodtime '(24343 10971 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-eb9da4"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("try" code nil nil [399 510])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [617 621]))                  
                :type "class")
                nil [589 622])
            ("FAILURE" variable nil nil [636 655])
            ("SUCCESS" variable nil nil [656 675])
            ("ANY" variable nil nil [677 688])
            ("ANY_ALL" variable nil nil [689 708])
            ("ASSERT" variable nil nil [709 726])
            ("ASSERT_NOT" variable nil nil [727 752])
            ("AT" variable nil nil [753 762])
            ("BIGCHARSET" variable nil nil [763 788])
            ("BRANCH" variable nil nil [789 806])
            ("CALL" variable nil nil [807 820])
            ("CATEGORY" variable nil nil [821 842])
            ("CHARSET" variable nil nil [843 862])
            ("GROUPREF" variable nil nil [863 884])
            ("GROUPREF_IGNORE" variable nil nil [885 920])
            ("GROUPREF_EXISTS" variable nil nil [921 956])
            ("IN" variable nil nil [957 966])
            ("IN_IGNORE" variable nil nil [967 990])
            ("INFO" variable nil nil [991 1004])
            ("JUMP" variable nil nil [1005 1018])
            ("LITERAL" variable nil nil [1019 1038])
            ("LITERAL_IGNORE" variable nil nil [1039 1072])
            ("MARK" variable nil nil [1073 1086])
            ("MAX_REPEAT" variable nil nil [1087 1112])
            ("MAX_UNTIL" variable nil nil [1113 1136])
            ("MIN_REPEAT" variable nil nil [1137 1162])
            ("MIN_UNTIL" variable nil nil [1163 1186])
            ("NEGATE" variable nil nil [1187 1204])
            ("NOT_LITERAL" variable nil nil [1205 1232])
            ("NOT_LITERAL_IGNORE" variable nil nil [1233 1274])
            ("RANGE" variable nil nil [1275 1290])
            ("REPEAT" variable nil nil [1291 1308])
            ("REPEAT_ONE" variable nil nil [1309 1334])
            ("SUBPATTERN" variable nil nil [1335 1360])
            ("MIN_REPEAT_ONE" variable nil nil [1361 1394])
            ("AT_BEGINNING" variable nil nil [1408 1437])
            ("AT_BEGINNING_LINE" variable nil nil [1438 1477])
            ("AT_BEGINNING_STRING" variable nil nil [1478 1521])
            ("AT_BOUNDARY" variable nil nil [1522 1549])
            ("AT_NON_BOUNDARY" variable nil nil [1550 1585])
            ("AT_END" variable nil nil [1586 1603])
            ("AT_END_LINE" variable nil nil [1604 1631])
            ("AT_END_STRING" variable nil nil [1632 1663])
            ("AT_LOC_BOUNDARY" variable nil nil [1664 1699])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1700 1743])
            ("AT_UNI_BOUNDARY" variable nil nil [1744 1779])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1780 1823])
            ("CATEGORY_DIGIT" variable nil nil [1838 1871])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1872 1913])
            ("CATEGORY_SPACE" variable nil nil [1914 1947])
            ("CATEGORY_NOT_SPACE" variable nil nil [1948 1989])
            ("CATEGORY_WORD" variable nil nil [1990 2021])
            ("CATEGORY_NOT_WORD" variable nil nil [2022 2061])
            ("CATEGORY_LINEBREAK" variable nil nil [2062 2103])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2104 2153])
            ("CATEGORY_LOC_WORD" variable nil nil [2154 2193])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2194 2241])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2242 2283])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2284 2333])
            ("CATEGORY_UNI_SPACE" variable nil nil [2334 2375])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2376 2425])
            ("CATEGORY_UNI_WORD" variable nil nil [2426 2465])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2466 2513])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2514 2563])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2564 2621])
            ("OPCODES" variable nil nil [2623 3120])
            ("ATCODES" variable nil nil [3122 3346])
            ("CHCODES" variable nil nil [3348 3762])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3777 3781]))              ) nil [3764 3878])
            ("OPCODES" variable nil nil [3879 3906])
            ("ATCODES" variable nil nil [3907 3934])
            ("CHCODES" variable nil nil [3935 3962])
            ("OP_IGNORE" variable nil nil [4012 4142])
            ("AT_MULTILINE" variable nil nil [4144 4223])
            ("AT_LOCALE" variable nil nil [4225 4315])
            ("AT_UNICODE" variable nil nil [4317 4408])
            ("CH_LOCALE" variable nil nil [4410 4764])
            ("CH_UNICODE" variable nil nil [4766 5145])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5155 5176])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5216 5239])
            ("SRE_FLAG_LOCALE" variable nil nil [5259 5278])
            ("SRE_FLAG_MULTILINE" variable nil nil [5302 5324])
            ("SRE_FLAG_DOTALL" variable nil nil [5360 5380])
            ("SRE_FLAG_UNICODE" variable nil nil [5415 5436])
            ("SRE_FLAG_VERBOSE" variable nil nil [5458 5479])
            ("SRE_FLAG_DEBUG" variable nil nil [5513 5533])
            ("SRE_INFO_PREFIX" variable nil nil [5574 5593])
            ("SRE_INFO_LITERAL" variable nil nil [5607 5627])
            ("SRE_INFO_CHARSET" variable nil nil [5674 5694])
            ("if" code nil nil [5743 7198]))          
      :file "sre_constants.py"
      :pointmax 7198
      :fsize 7197
      :lastmodtime '(24343 10971 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-ebdf1c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 942])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [959 967]))                  )
                nil [944 1635])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1653 1661])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1663 1677]))                  )
                nil [1637 4028]))          
      :file "linecache.py"
      :pointmax 4028
      :fsize 4027
      :lastmodtime '(24343 10970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-22ac0c4"
      :major-mode python-mode
      :tags 
        '( ("'''This module implements specialized container datatypes providing
alternatives to Python's general purpose built-in containers, dict,
list, set, and tuple.

* namedtuple   factory function for creating tuple subclasses with named fields
* deque        list-like container with fast appends and pops on either end
* Counter      dict subclass for counting hashable objects
* OrderedDict  dict subclass that remembers the order entries were added
* defaultdict  dict subclass that calls a factory function to supply missing values

'''" code nil nil [1 536])
            ("__all__" variable nil nil [538 612])
            ("_abcoll" include nil nil [761 782])
            ("_abcoll" include nil nil [783 797])
            ("__all__" variable nil nil [798 824])
            ("_collections" include nil nil [826 869])
            ("operator" include nil nil [870 927])
            ("keyword" include nil nil [928 971])
            ("sys" include nil nil [972 990])
            ("heapq" include nil nil [991 1013])
            ("itertools" include nil nil [1014 1091])
            ("itertools" include nil nil [1092 1127])
            ("try" code nil nil [1129 1254])
            ("OrderedDict" type
               (:superclasses ("dict")
                :members 
                  ( ("'Dictionary that remembers insertion order'" code nil (reparse-symbol indented_block_body) [1464 1507])
                    ("__init__" function
                       (:suite 
                          ( ("'''Initialize an ordered dictionary.  The signature is the same as
        regular dictionaries, but keyword arguments are not recommended because
        their insertion order is arbitrary.

        '''" code nil (reparse-symbol indented_block_body) [2110 2313])
                            ("if" code nil (reparse-symbol indented_block_body) [2322 2461])
                            ("self" variable nil (reparse-symbol indented_block_body) [2469 2483])
                            ("args" variable nil (reparse-symbol indented_block_body) [2492 2507])
                            ("if" code nil (reparse-symbol indented_block_body) [2516 2614])
                            ("try" code nil (reparse-symbol indented_block_body) [2622 2823])
                            ("self" code nil (reparse-symbol indented_block_body) [2831 2859]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [2086 2091])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2093 2099]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2073 2860])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2881 2885])
                            ("key" variable nil (reparse-symbol function_parameters) [2887 2890])
                            ("value" variable nil (reparse-symbol function_parameters) [2892 2897])
                            ("dict_setitem" variable nil (reparse-symbol function_parameters) [2899 2911]))                          )
                        (reparse-symbol indented_block_body) [2865 3333])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3354 3358])
                            ("key" variable nil (reparse-symbol function_parameters) [3360 3363])
                            ("dict_delitem" variable nil (reparse-symbol function_parameters) [3365 3377]))                          )
                        (reparse-symbol indented_block_body) [3338 3848])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3866 3870]))                          )
                        (reparse-symbol indented_block_body) [3853 4251])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4273 4277]))                          )
                        (reparse-symbol indented_block_body) [4256 4677])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4692 4696]))                          )
                        (reparse-symbol indented_block_body) [4682 4872])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4961 4965]))                          )
                        (reparse-symbol indented_block_body) [4952 5036])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5052 5056]))                          )
                        (reparse-symbol indented_block_body) [5041 5148])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5163 5167]))                          )
                        (reparse-symbol indented_block_body) [5153 5277])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5295 5299]))                          )
                        (reparse-symbol indented_block_body) [5282 5387])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5407 5411]))                          )
                        (reparse-symbol indented_block_body) [5392 5524])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5543 5547]))                          )
                        (reparse-symbol indented_block_body) [5529 5676])
                    ("update" variable nil (reparse-symbol indented_block_body) [5681 5711])
                    ("__update" variable nil (reparse-symbol indented_block_body) [5717 5734])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [5799 5818])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5832 5836])
                            ("key" variable nil (reparse-symbol function_parameters) [5838 5841])
                            ("default" variable nil (reparse-symbol function_parameters) [5843 5850]))                          )
                        (reparse-symbol indented_block_body) [5824 6254])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6274 6278])
                            ("key" variable nil (reparse-symbol function_parameters) [6280 6283])
                            ("default" variable nil (reparse-symbol function_parameters) [6285 6292]))                          )
                        (reparse-symbol indented_block_body) [6259 6483])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6500 6504])
                            ("last" variable nil (reparse-symbol function_parameters) [6506 6510]))                          )
                        (reparse-symbol indented_block_body) [6488 6872])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6890 6894])
                            ("_repr_running" variable nil (reparse-symbol function_parameters) [6896 6909]))                          )
                        (reparse-symbol indented_block_body) [6877 7318])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7338 7342]))                          )
                        (reparse-symbol indented_block_body) [7323 7668])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7682 7686]))                          )
                        (reparse-symbol indented_block_body) [7673 7769])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7804 7807])
                            ("iterable" variable nil (reparse-symbol function_parameters) [7809 7817])
                            ("value" variable nil (reparse-symbol function_parameters) [7819 7824]))                          )
                        (reparse-symbol indented_block_body) [7774 8074])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8090 8094])
                            ("other" variable nil (reparse-symbol function_parameters) [8096 8101]))                          )
                        (reparse-symbol indented_block_body) [8079 8426])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8442 8446])
                            ("other" variable nil (reparse-symbol function_parameters) [8448 8453]))                          )
                        (reparse-symbol indented_block_body) [8431 8523])
                    ("viewkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8618 8622]))                          )
                        (reparse-symbol indented_block_body) [8605 8730])
                    ("viewvalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8750 8754]))                          )
                        (reparse-symbol indented_block_body) [8735 8860])
                    ("viewitems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8879 8883]))                          )
                        (reparse-symbol indented_block_body) [8865 8994]))                  
                :type "class")
                nil [1435 8994])
            ("_class_template" variable nil nil [9174 10622])
            ("_repr_template" variable nil nil [10624 10652])
            ("_field_template" variable nil nil [10654 10767])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [10784 10792])
                    ("field_names" variable nil (reparse-symbol function_parameters) [10794 10805])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10807 10814])
                    ("rename" variable nil (reparse-symbol function_parameters) [10822 10828]))                  )
                nil [10769 14954])
            ("Counter" type
               (:superclasses ("dict")
                :members 
                  ( ("'''Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    '''" code nil (reparse-symbol indented_block_body) [15141 16842])
                    ("__init__" function
                       (:suite 
                          ( ("'''Create a new, empty Counter object.  And if given, count elements
        from an input iterable.  Or, initialize the count from another mapping
        of elements to their counts.

        >>> c = Counter()                           # a new, empty counter
        >>> c = Counter('gallahad')                 # a new counter from an iterable
        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args

        '''" code nil (reparse-symbol indented_block_body) [17213 17740])
                            ("if" code nil (reparse-symbol indented_block_body) [17749 17884])
                            ("self" variable nil (reparse-symbol indented_block_body) [17892 17906])
                            ("args" variable nil (reparse-symbol indented_block_body) [17915 17930])
                            ("if" code nil (reparse-symbol indented_block_body) [17939 18037])
                            ("super" code nil (reparse-symbol indented_block_body) [18045 18076])
                            ("self" code nil (reparse-symbol indented_block_body) [18085 18111]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [17189 17194])
                            ("kwds" variable nil (reparse-symbol function_parameters) [17196 17202]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17176 18112])
                    ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18133 18137])
                            ("key" variable nil (reparse-symbol function_parameters) [18139 18142]))                          )
                        (reparse-symbol indented_block_body) [18117 18290])
                    ("most_common" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18311 18315])
                            ("n" variable nil (reparse-symbol function_parameters) [18317 18318]))                          )
                        (reparse-symbol indented_block_body) [18295 18804])
                    ("elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18822 18826]))                          )
                        (reparse-symbol indented_block_body) [18809 19627])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19707 19710])
                            ("iterable" variable nil (reparse-symbol function_parameters) [19712 19720])
                            ("v" variable nil (reparse-symbol function_parameters) [19722 19723]))                          )
                        (reparse-symbol indented_block_body) [19677 19986])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [20002 20007])
                        ("kwds" variable nil (reparse-symbol function_parameters) [20009 20015]))                      ) (reparse-symbol indented_block_body) [19991 21857])
                    ("subtract" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [21875 21880])
                        ("kwds" variable nil (reparse-symbol function_parameters) [21882 21888]))                      ) (reparse-symbol indented_block_body) [21862 23325])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23339 23343]))                          )
                        (reparse-symbol indented_block_body) [23330 23415])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23435 23439]))                          )
                        (reparse-symbol indented_block_body) [23420 23487])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23508 23512])
                            ("elem" variable nil (reparse-symbol function_parameters) [23514 23518]))                          )
                        (reparse-symbol indented_block_body) [23492 23679])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23697 23701]))                          )
                        (reparse-symbol indented_block_body) [23684 23907])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24264 24268])
                            ("other" variable nil (reparse-symbol function_parameters) [24270 24275]))                          )
                        (reparse-symbol indented_block_body) [24252 24825])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24842 24846])
                            ("other" variable nil (reparse-symbol function_parameters) [24848 24853]))                          )
                        (reparse-symbol indented_block_body) [24830 25432])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25448 25452])
                            ("other" variable nil (reparse-symbol function_parameters) [25454 25459]))                          )
                        (reparse-symbol indented_block_body) [25437 26106])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26123 26127])
                            ("other" variable nil (reparse-symbol function_parameters) [26129 26134]))                          )
                        (reparse-symbol indented_block_body) [26111 26630]))                  
                :type "class")
                nil [15116 26630])
            ("if" code nil nil [26632 27799]))          
      :file "collections.py"
      :pointmax 27799
      :fsize 27798
      :lastmodtime '(24343 10970 0 0)
      :unmatched-syntax '((NAME 27257 . 27267) (PAREN_BLOCK 27267 . 27283) (NAME 26915 . 26925) (PAREN_BLOCK 26925 . 26941) (NAME 26482 . 26490) (IF 26499 . 26501) (ELSE 26522 . 26526) (NAME 25832 . 25840) (IF 25855 . 25857) (ELSE 25878 . 25882) (NAME 22905 . 22913) (IF 22924 . 22926) (ELSE 22932 . 22936) (NAME 21244 . 21252) (IF 21263 . 21265) (ELSE 21271 . 21275) (INDENT_BLOCK 14392 . 14456) (NEWLINE 14391 . 14392) (COLON 14390 . 14391) (TRY 14315 . 14318) (AS 14386 . 14388)))
    (semanticdb-table "semanticdb-table-22b66b0"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("linecache" include nil nil [73 89])
            ("sys" include nil nil [90 100])
            ("types" include nil nil [101 113])
            ("__all__" variable nil nil [115 378])
            ("_print" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [391 395])
                ("str" variable nil (reparse-symbol function_parameters) [397 400])
                ("terminator" variable nil (reparse-symbol function_parameters) [405 415]))              ) nil [380 454])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [471 485])
                    ("file" variable nil (reparse-symbol function_parameters) [487 491]))                  )
                nil [456 893])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [910 924]))                  )
                nil [894 1625])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1640 1642])
                    ("limit" variable nil (reparse-symbol function_parameters) [1644 1649])
                    ("file" variable nil (reparse-symbol function_parameters) [1656 1660]))                  )
                nil [1627 2612])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_tb(tb, limit))'."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2627 2629])
                    ("limit" variable nil (reparse-symbol function_parameters) [2631 2636]))                  )
                nil [2613 2756])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2772 2774])
                    ("limit" variable nil (reparse-symbol function_parameters) [2776 2781]))                  )
                nil [2757 3892])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [3914 3919])
                    ("value" variable nil (reparse-symbol function_parameters) [3921 3926])
                    ("tb" variable nil (reparse-symbol function_parameters) [3928 3930])
                    ("limit" variable nil (reparse-symbol function_parameters) [3932 3937])
                    ("file" variable nil (reparse-symbol function_parameters) [3944 3948]))                  )
                nil [3894 4725])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4747 4752])
                    ("value" variable nil (reparse-symbol function_parameters) [4754 4759])
                    ("tb" variable nil (reparse-symbol function_parameters) [4761 4763])
                    ("limit" variable nil (reparse-symbol function_parameters) [4765 4770]))                  )
                nil [4726 5377])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [5404 5409])
                    ("value" variable nil (reparse-symbol function_parameters) [5411 5416]))                  )
                nil [5378 7519])
            ("_format_final_exc_line" function
               (:documentation "Return a list of a single line -- normal case for format_exception_only"
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [7547 7552])
                    ("value" variable nil (reparse-symbol function_parameters) [7554 7559]))                  )
                nil [7520 7816])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [7831 7836]))              ) nil [7817 8101])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.
    (In fact, it uses sys.exc_info() to retrieve the same information
    in a thread-safe way.)"
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8117 8122])
                    ("file" variable nil (reparse-symbol function_parameters) [8129 8133]))                  )
                nil [8103 8542])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8559 8564]))                  )
                nil [8544 8784])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8801 8806])
                    ("file" variable nil (reparse-symbol function_parameters) [8813 8817]))                  )
                nil [8786 9181])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9199 9200])
                    ("limit" variable nil (reparse-symbol function_parameters) [9207 9212])
                    ("file" variable nil (reparse-symbol function_parameters) [9219 9223]))                  )
                nil [9183 9686])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9704 9705])
                    ("limit" variable nil (reparse-symbol function_parameters) [9712 9717]))                  )
                nil [9687 9988])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [10007 10008])
                    ("limit" variable nil (reparse-symbol function_parameters) [10015 10020]))                  )
                nil [9989 11149])
            ("tb_lineno" function
               (:documentation "Calculate correct line number of traceback given in tb.

    Obsolete in 2.3.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [11164 11166]))                  )
                nil [11150 11286]))          
      :file "traceback.py"
      :pointmax 11286
      :fsize 11285
      :lastmodtime '(24343 10971 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-ebef9c"
      :major-mode python-mode
      :tags 
        '( ("_struct" include nil nil [1 22])
            ("_struct" include nil nil [23 54])
            ("_struct" include nil nil [55 82]))          
      :file "struct.py"
      :pointmax 83
      :fsize 82
      :lastmodtime '(24343 10971 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1ecbd30"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"A collection of string operations (most are no longer used).

Warning: most of the code you see here isn't normally used nowadays.
Beginning with Python 1.6, many of these functions are implemented as
methods on the standard string object. They used to be implemented by
a built-in module called strop, but strop is now obsolete itself.

Public module variables:

whitespace -- a string containing all characters considered whitespace
lowercase -- a string containing all characters considered lowercase letters
uppercase -- a string containing all characters considered uppercase letters
letters -- a string containing all characters considered letters
digits -- a string containing all characters considered decimal digits
hexdigits -- a string containing all characters considered hexadecimal digits
octdigits -- a string containing all characters considered octal digits
punctuation -- a string containing all characters considered punctuation
printable -- a string containing all characters considered printable

\"\"\"" code nil nil [1 1025])
            ("whitespace" variable nil nil [1083 1109])
            ("lowercase" variable nil nil [1110 1150])
            ("uppercase" variable nil nil [1151 1191])
            ("letters" code nil nil [1192 1223])
            ("ascii_lowercase" variable nil nil [1224 1251])
            ("ascii_uppercase" variable nil nil [1252 1279])
            ("ascii_letters" code nil nil [1280 1329])
            ("digits" variable nil nil [1330 1351])
            ("hexdigits" code nil nil [1352 1392])
            ("octdigits" variable nil nil [1393 1415])
            ("punctuation" variable nil nil [1416 1468])
            ("printable" code nil nil [1469 1524])
            ("l" variable nil nil [1603 1628])
            ("_idmap" variable nil nil [1629 1653])
            ("del" code nil nil [1654 1659])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("sep" variable nil (reparse-symbol function_parameters) [1800 1803]))                  )
                nil [1784 2290])
            ("_idmapL" variable nil nil [2325 2339])
            ("maketrans" function
               (:documentation "maketrans(frm, to) -> string

    Return a translation table (a string of 256 bytes long)
    suitable for use in string.translate.  The strings frm and to
    must be of the same length.

    "
                :arguments 
                  ( ("fromstr" variable nil (reparse-symbol function_parameters) [2354 2361])
                    ("tostr" variable nil (reparse-symbol function_parameters) [2363 2368]))                  )
                nil [2340 2890])
            ("re" include nil nil [2962 2978])
            ("_multimap" type
               (:documentation "Helper class for combining multiple mappings.

    Used by .{safe_,}substitute() to combine the mapping and keyword
    arguments.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3195 3218])
                            ("self" variable nil (reparse-symbol indented_block_body) [3227 3254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164])
                            ("primary" variable nil (reparse-symbol function_parameters) [3166 3173])
                            ("secondary" variable nil (reparse-symbol function_parameters) [3175 3184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3147 3255])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3276 3280])
                            ("key" variable nil (reparse-symbol function_parameters) [3282 3285]))                          )
                        (reparse-symbol indented_block_body) [3260 3404]))                  
                :type "class")
                nil [2980 3404])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [3442 3762])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3813 3870])
                            ("if" code nil (reparse-symbol indented_block_body) [3879 4113])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4121 4185]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3781 3784])
                            ("name" variable nil (reparse-symbol function_parameters) [3786 3790])
                            ("bases" variable nil (reparse-symbol function_parameters) [3792 3797])
                            ("dct" variable nil (reparse-symbol function_parameters) [3799 3802]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3768 4186]))                  
                :type "class")
                nil [3406 4186])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [4265 4299])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [4305 4320])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [4325 4356])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4400 4424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("template" variable nil (reparse-symbol function_parameters) [4381 4389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4362 4425])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("mo" variable nil (reparse-symbol function_parameters) [4516 4518]))                          )
                        (reparse-symbol indented_block_body) [4497 4884])
                    ("substitute" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [4904 4909])
                        ("kws" variable nil (reparse-symbol function_parameters) [4911 4916]))                      ) (reparse-symbol indented_block_body) [4889 6150])
                    ("safe_substitute" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [6175 6180])
                        ("kws" variable nil (reparse-symbol function_parameters) [6182 6187]))                      ) (reparse-symbol indented_block_body) [6155 7444]))                  
                :type "class")
                nil [4188 7444])
            ("index_error" variable nil nil [7675 7699])
            ("atoi_error" variable nil nil [7700 7723])
            ("atof_error" variable nil nil [7724 7747])
            ("atol_error" variable nil nil [7748 7771])
            ("lower" function
               (:documentation "lower(s) -> string

    Return a copy of the string s converted to lowercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7826 7827]))                  )
                nil [7816 7945])
            ("upper" function
               (:documentation "upper(s) -> string

    Return a copy of the string s converted to uppercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7999 8000]))                  )
                nil [7989 8118])
            ("swapcase" function
               (:documentation "swapcase(s) -> string

    Return a copy of the string s with upper case characters
    converted to lowercase and vice versa.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8173 8174]))                  )
                nil [8160 8344])
            ("strip" function
               (:documentation "strip(s [,chars]) -> string

    Return a copy of the string s with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8400 8401])
                    ("chars" variable nil (reparse-symbol function_parameters) [8403 8408]))                  )
                nil [8390 8717])
            ("lstrip" function
               (:documentation "lstrip(s [,chars]) -> string

    Return a copy of the string s with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8761 8762])
                    ("chars" variable nil (reparse-symbol function_parameters) [8764 8769]))                  )
                nil [8750 8989])
            ("rstrip" function
               (:documentation "rstrip(s [,chars]) -> string

    Return a copy of the string s with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9034 9035])
                    ("chars" variable nil (reparse-symbol function_parameters) [9037 9042]))                  )
                nil [9023 9263])
            ("split" function
               (:documentation "split(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9333 9334])
                    ("sep" variable nil (reparse-symbol function_parameters) [9336 9339])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9346 9354]))                  )
                nil [9323 9775])
            ("splitfields" variable nil nil [9775 9794])
            ("rsplit" function
               (:documentation "rsplit(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9865 9866])
                    ("sep" variable nil (reparse-symbol function_parameters) [9868 9871])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9878 9886]))                  )
                nil [9854 10281])
            ("join" function
               (:documentation "join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

    "
                :arguments 
                  ( ("words" variable nil (reparse-symbol function_parameters) [10329 10334])
                    ("sep" variable nil (reparse-symbol function_parameters) [10336 10339]))                  )
                nil [10320 10600])
            ("joinfields" variable nil nil [10600 10617])
            ("index" function
               (:documentation "index(s, sub [,start [,end]]) -> int

    Like find but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10676 10677])
                    ("args" variable nil (reparse-symbol function_parameters) [10679 10684]))                  )
                nil [10666 10836])
            ("rindex" function
               (:documentation "rindex(s, sub [,start [,end]]) -> int

    Like rfind but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10900 10901])
                    ("args" variable nil (reparse-symbol function_parameters) [10903 10908]))                  )
                nil [10889 11063])
            ("count" function
               (:documentation "count(s, sub[, start[,end]]) -> int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11123 11124])
                    ("args" variable nil (reparse-symbol function_parameters) [11126 11131]))                  )
                nil [11113 11371])
            ("find" function
               (:documentation "find(s, sub [,start [,end]]) -> in

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11422 11423])
                    ("args" variable nil (reparse-symbol function_parameters) [11425 11430]))                  )
                nil [11413 11728])
            ("rfind" function
               (:documentation "rfind(s, sub [,start [,end]]) -> int

    Return the highest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11785 11786])
                    ("args" variable nil (reparse-symbol function_parameters) [11788 11793]))                  )
                nil [11775 12095])
            ("_float" variable nil nil [12117 12131])
            ("_int" variable nil nil [12132 12142])
            ("_long" variable nil nil [12143 12155])
            ("atof" function
               (:documentation "atof(s) -> float

    Return the floating point number represented by the string s.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12192 12193]))                  )
                nil [12183 12317])
            ("atoi" function
               (:documentation "atoi(s [,base]) -> int

    Return the integer represented by the string s in the given
    base, which defaults to 10.  The string s must consist of one
    or more digits, possibly preceded by a sign.  If base is 0, it
    is chosen from the leading characters of s, 0 for octal, 0x or
    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
    accepted.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12356 12357])
                    ("base" variable nil (reparse-symbol function_parameters) [12360 12364]))                  )
                nil [12347 12777])
            ("atol" function
               (:documentation "atol(s [,base]) -> long

    Return the long integer represented by the string s in the
    given base, which defaults to 10.  The string s must consist
    of one or more digits, possibly preceded by a sign.  If base
    is 0, it is chosen from the leading characters of s, 0 for
    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
    0x or 0X is accepted.  A trailing L or l is not accepted,
    unless base is 0.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12821 12822])
                    ("base" variable nil (reparse-symbol function_parameters) [12824 12828]))                  )
                nil [12812 13306])
            ("ljust" function
               (:documentation "ljust(s, width[, fillchar]) -> string

    Return a left-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13342 13343])
                    ("width" variable nil (reparse-symbol function_parameters) [13345 13350])
                    ("args" variable nil (reparse-symbol function_parameters) [13352 13357]))                  )
                nil [13332 13649])
            ("rjust" function
               (:documentation "rjust(s, width[, fillchar]) -> string

    Return a right-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13685 13686])
                    ("width" variable nil (reparse-symbol function_parameters) [13688 13693])
                    ("args" variable nil (reparse-symbol function_parameters) [13695 13700]))                  )
                nil [13675 13993])
            ("center" function
               (:documentation "center(s, width[, fillchar]) -> string

    Return a center version of s, in a field of the specified
    width. padded with spaces as needed.  The string is never
    truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14023 14024])
                    ("width" variable nil (reparse-symbol function_parameters) [14026 14031])
                    ("args" variable nil (reparse-symbol function_parameters) [14033 14038]))                  )
                nil [14012 14324])
            ("zfill" function
               (:documentation "zfill(x, width) -> string

    Pad a numeric string x with zeros on the left, to fill a field
    of the specified width.  The string x is never truncated.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [14536 14537])
                    ("width" variable nil (reparse-symbol function_parameters) [14539 14544]))                  )
                nil [14526 14803])
            ("expandtabs" function
               (:documentation "expandtabs(s [,tabsize]) -> string

    Return a copy of the string s with all tab characters replaced
    by the appropriate number of spaces, depending on the current
    column, and the tabsize (default 8).

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14918 14919])
                    ("tabsize" variable nil (reparse-symbol function_parameters) [14921 14928]))                  )
                nil [14903 15192])
            ("translate" function
               (:documentation "translate(s,table [,deletions]) -> string

    Return a copy of the string s, where all characters occurring
    in the optional argument deletions are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256.  The
    deletions argument is not allowed for Unicode strings.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15254 15255])
                    ("table" variable nil (reparse-symbol function_parameters) [15257 15262])
                    ("deletions" variable nil (reparse-symbol function_parameters) [15264 15273]))                  )
                nil [15240 16003])
            ("capitalize" function
               (:documentation "capitalize(s) -> string

    Return a copy of the string s with only its first character
    capitalized.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16073 16074]))                  )
                nil [16058 16225])
            ("replace" function
               (:documentation "replace (str, old, new[, maxreplace]) -> string

    Return a copy of string str with all occurrences of substring
    old replaced by new. If the optional argument maxreplace is
    given, only the first maxreplace occurrences are replaced.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16271 16272])
                    ("old" variable nil (reparse-symbol function_parameters) [16274 16277])
                    ("new" variable nil (reparse-symbol function_parameters) [16279 16282])
                    ("maxreplace" variable nil (reparse-symbol function_parameters) [16284 16294]))                  )
                nil [16259 16601])
            ("try" code nil nil [16843 17048])
            ("Formatter" type
               (:superclasses ("object")
                :members 
                  ( ("format" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [17494 17499])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [17501 17509]))                      ) (reparse-symbol indented_block_body) [17483 18182])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18199 18203])
                            ("format_string" variable nil (reparse-symbol function_parameters) [18205 18218])
                            ("args" variable nil (reparse-symbol function_parameters) [18220 18224])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18226 18232]))                          )
                        (reparse-symbol indented_block_body) [18187 18413])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18431 18435])
                            ("format_string" variable nil (reparse-symbol function_parameters) [18437 18450])
                            ("args" variable nil (reparse-symbol function_parameters) [18452 18456])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18458 18464])
                            ("used_args" variable nil (reparse-symbol function_parameters) [18466 18475])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [18477 18492]))                          )
                        (reparse-symbol indented_block_body) [18418 19722])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19742 19746])
                            ("key" variable nil (reparse-symbol function_parameters) [19748 19751])
                            ("args" variable nil (reparse-symbol function_parameters) [19753 19757])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19759 19765]))                          )
                        (reparse-symbol indented_block_body) [19728 19883])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19911 19915])
                            ("used_args" variable nil (reparse-symbol function_parameters) [19917 19926])
                            ("args" variable nil (reparse-symbol function_parameters) [19928 19932])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19934 19940]))                          )
                        (reparse-symbol indented_block_body) [19889 19956])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19979 19983])
                            ("value" variable nil (reparse-symbol function_parameters) [19985 19990])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19992 20003]))                          )
                        (reparse-symbol indented_block_body) [19962 20048])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20072 20076])
                            ("value" variable nil (reparse-symbol function_parameters) [20078 20083])
                            ("conversion" variable nil (reparse-symbol function_parameters) [20085 20095]))                          )
                        (reparse-symbol indented_block_body) [20054 20413])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20788 20792])
                            ("format_string" variable nil (reparse-symbol function_parameters) [20794 20807]))                          )
                        (reparse-symbol indented_block_body) [20778 20859])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21136 21140])
                            ("field_name" variable nil (reparse-symbol function_parameters) [21142 21152])
                            ("args" variable nil (reparse-symbol function_parameters) [21154 21158])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21160 21166]))                          )
                        (reparse-symbol indented_block_body) [21122 21549]))                  
                :type "class")
                nil [17454 21549]))          
      :file "string.py"
      :pointmax 21549
      :fsize 21548
      :lastmodtime '(24343 10971 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1f0c914"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
\"\"\"" code nil nil [102 371])
            ("abc" include nil nil [373 412])
            ("sys" include nil nil [413 423])
            ("__all__" variable nil nil [425 708])
            ("_hasattr" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [749 750])
                ("attr" variable nil (reparse-symbol function_parameters) [752 756]))              ) nil [736 911])
            ("Hashable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [933 956])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [962 1019])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1062 1065])
                            ("C" variable nil (reparse-symbol function_parameters) [1067 1068]))                          )
                        (reparse-symbol indented_block_body) [1024 1502]))                  
                :type "class")
                nil [913 1502])
            ("Iterable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [1524 1547])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1553 1637])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1680 1683])
                            ("C" variable nil (reparse-symbol function_parameters) [1685 1686]))                          )
                        (reparse-symbol indented_block_body) [1642 1815]))                  
                :type "class")
                nil [1504 1815])
            ("Iterable" code nil nil [1816 1838])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1901 1905]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1872 2022])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2040 2044]))                          )
                        (reparse-symbol indented_block_body) [2027 2067])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2110 2113])
                            ("C" variable nil (reparse-symbol function_parameters) [2115 2116]))                          )
                        (reparse-symbol indented_block_body) [2072 2269]))                  
                :type "class")
                nil [1841 2269])
            ("Sized" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2288 2311])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2349 2353]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2317 2373])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2416 2419])
                            ("C" variable nil (reparse-symbol function_parameters) [2421 2422]))                          )
                        (reparse-symbol indented_block_body) [2378 2547]))                  
                :type "class")
                nil [2271 2547])
            ("Container" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2570 2593])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2636 2640])
                            ("x" variable nil (reparse-symbol function_parameters) [2642 2643]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2599 2667])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2710 2713])
                            ("C" variable nil (reparse-symbol function_parameters) [2715 2716]))                          )
                        (reparse-symbol indented_block_body) [2672 2850]))                  
                :type "class")
                nil [2549 2850])
            ("Callable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2872 2895])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2934 2938])
                            ("args" variable nil (reparse-symbol function_parameters) [2940 2945])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2947 2953]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2901 2977])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3020 3023])
                            ("C" variable nil (reparse-symbol function_parameters) [3025 3026]))                          )
                        (reparse-symbol indented_block_body) [2982 3155]))                  
                :type "class")
                nil [2852 3155])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3584 3588])
                            ("other" variable nil (reparse-symbol function_parameters) [3590 3595]))                          )
                        (reparse-symbol indented_block_body) [3573 3840])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3856 3860])
                            ("other" variable nil (reparse-symbol function_parameters) [3862 3867]))                          )
                        (reparse-symbol indented_block_body) [3845 4004])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4020 4024])
                            ("other" variable nil (reparse-symbol function_parameters) [4026 4031]))                          )
                        (reparse-symbol indented_block_body) [4009 4168])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4184 4188])
                            ("other" variable nil (reparse-symbol function_parameters) [4190 4195]))                          )
                        (reparse-symbol indented_block_body) [4173 4440])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4456 4460])
                            ("other" variable nil (reparse-symbol function_parameters) [4462 4467]))                          )
                        (reparse-symbol indented_block_body) [4445 4605])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4621 4625])
                            ("other" variable nil (reparse-symbol function_parameters) [4627 4632]))                          )
                        (reparse-symbol indented_block_body) [4610 4670])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4711 4714])
                            ("it" variable nil (reparse-symbol function_parameters) [4716 4718]))                          )
                        (reparse-symbol indented_block_body) [4675 4947])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4964 4968])
                            ("other" variable nil (reparse-symbol function_parameters) [4970 4975]))                          )
                        (reparse-symbol indented_block_body) [4952 5134])
                    ("__rand__" variable nil (reparse-symbol indented_block_body) [5139 5157])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5178 5182])
                            ("other" variable nil (reparse-symbol function_parameters) [5184 5189]))                          )
                        (reparse-symbol indented_block_body) [5163 5359])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5375 5379])
                            ("other" variable nil (reparse-symbol function_parameters) [5381 5386]))                          )
                        (reparse-symbol indented_block_body) [5364 5563])
                    ("__ror__" variable nil (reparse-symbol indented_block_body) [5568 5584])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5602 5606])
                            ("other" variable nil (reparse-symbol function_parameters) [5608 5613]))                          )
                        (reparse-symbol indented_block_body) [5590 5905])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5923 5927])
                            ("other" variable nil (reparse-symbol function_parameters) [5929 5934]))                          )
                        (reparse-symbol indented_block_body) [5910 6226])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6243 6247])
                            ("other" variable nil (reparse-symbol function_parameters) [6249 6254]))                          )
                        (reparse-symbol indented_block_body) [6231 6476])
                    ("__rxor__" variable nil (reparse-symbol indented_block_body) [6481 6499])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [6576 6591])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6607 6611]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [6597 7600]))                  
                :type "class")
                nil [3172 7600])
            ("Set" code nil nil [7601 7624])
            ("MutableSet" type
               (:documentation "A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Set")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8085 8089])
                            ("value" variable nil (reparse-symbol function_parameters) [8091 8096]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [8057 8163])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8200 8204])
                            ("value" variable nil (reparse-symbol function_parameters) [8206 8211]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [8168 8319])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8335 8339])
                            ("value" variable nil (reparse-symbol function_parameters) [8341 8346]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [8324 8509])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8522 8526]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [8514 8766])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8781 8785]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [8771 8963])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8980 8984])
                            ("it" variable nil (reparse-symbol function_parameters) [8986 8988]))                          )
                        (reparse-symbol indented_block_body) [8968 9064])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9082 9086])
                            ("it" variable nil (reparse-symbol function_parameters) [9088 9090]))                          )
                        (reparse-symbol indented_block_body) [9069 9179])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9197 9201])
                            ("it" variable nil (reparse-symbol function_parameters) [9203 9205]))                          )
                        (reparse-symbol indented_block_body) [9184 9536])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9554 9558])
                            ("it" variable nil (reparse-symbol function_parameters) [9560 9562]))                          )
                        (reparse-symbol indented_block_body) [9541 9712]))                  
                :type "class")
                nil [7627 9712])
            ("MutableSet" code nil nil [9713 9737])
            ("Mapping" type
               (:documentation "A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.

    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10054 10058])
                            ("key" variable nil (reparse-symbol function_parameters) [10060 10063]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10018 10089])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10102 10106])
                            ("key" variable nil (reparse-symbol function_parameters) [10108 10111])
                            ("default" variable nil (reparse-symbol function_parameters) [10113 10120]))                          )
                        (reparse-symbol indented_block_body) [10094 10293])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10315 10319])
                            ("key" variable nil (reparse-symbol function_parameters) [10321 10324]))                          )
                        (reparse-symbol indented_block_body) [10298 10450])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10468 10472]))                          )
                        (reparse-symbol indented_block_body) [10455 10558])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10578 10582]))                          )
                        (reparse-symbol indented_block_body) [10563 10699])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10718 10722]))                          )
                        (reparse-symbol indented_block_body) [10704 10857])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10871 10875]))                          )
                        (reparse-symbol indented_block_body) [10862 10943])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10958 10962]))                          )
                        (reparse-symbol indented_block_body) [10948 11082])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11098 11102]))                          )
                        (reparse-symbol indented_block_body) [11087 11191])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [11271 11286])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11303 11307])
                            ("other" variable nil (reparse-symbol function_parameters) [11309 11314]))                          )
                        (reparse-symbol indented_block_body) [11292 11451])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11467 11471])
                            ("other" variable nil (reparse-symbol function_parameters) [11473 11478]))                          )
                        (reparse-symbol indented_block_body) [11456 11516]))                  
                :type "class")
                nil [9759 11516])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11585 11608]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11561 11565])
                            ("mapping" variable nil (reparse-symbol function_parameters) [11567 11574]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11548 11609])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11626 11630]))                          )
                        (reparse-symbol indented_block_body) [11614 11667])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11685 11689]))                          )
                        (reparse-symbol indented_block_body) [11672 11761]))                  
                :type "class")
                nil [11517 11761])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11838 11842])
                            ("it" variable nil (reparse-symbol function_parameters) [11844 11846]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11802 11872])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11894 11898])
                            ("key" variable nil (reparse-symbol function_parameters) [11900 11903]))                          )
                        (reparse-symbol indented_block_body) [11877 11942])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11960 11964]))                          )
                        (reparse-symbol indented_block_body) [11947 12023]))                  
                :type "class")
                nil [11763 12023])
            ("KeysView" code nil nil [12024 12062])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12140 12144])
                            ("it" variable nil (reparse-symbol function_parameters) [12146 12148]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12104 12174])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12196 12200])
                            ("item" variable nil (reparse-symbol function_parameters) [12202 12206]))                          )
                        (reparse-symbol indented_block_body) [12179 12377])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12395 12399]))                          )
                        (reparse-symbol indented_block_body) [12382 12480]))                  
                :type "class")
                nil [12064 12480])
            ("ItemsView" code nil nil [12481 12521])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12576 12580])
                            ("value" variable nil (reparse-symbol function_parameters) [12582 12587]))                          )
                        (reparse-symbol indented_block_body) [12559 12717])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12735 12739]))                          )
                        (reparse-symbol indented_block_body) [12722 12813]))                  
                :type "class")
                nil [12523 12813])
            ("ValuesView" code nil nil [12814 12856])
            ("MutableMapping" type
               (:documentation "A MutableMapping is a generic container for associating
    key/value pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __setitem__, __delitem__,
    __iter__, and __len__.

    "
                :superclasses ("Mapping")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13178 13182])
                            ("key" variable nil (reparse-symbol function_parameters) [13184 13187])
                            ("value" variable nil (reparse-symbol function_parameters) [13189 13194]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13142 13220])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13261 13265])
                            ("key" variable nil (reparse-symbol function_parameters) [13267 13270]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13225 13296])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [13301 13320])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13334 13338])
                            ("key" variable nil (reparse-symbol function_parameters) [13340 13343])
                            ("default" variable nil (reparse-symbol function_parameters) [13345 13352]))                          )
                        (reparse-symbol indented_block_body) [13326 13771])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13788 13792]))                          )
                        (reparse-symbol indented_block_body) [13776 14120])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14135 14139]))                          )
                        (reparse-symbol indented_block_body) [14125 14307])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [14323 14328])
                        ("kwds" variable nil (reparse-symbol function_parameters) [14330 14336]))                      ) (reparse-symbol indented_block_body) [14312 15478])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15498 15502])
                            ("key" variable nil (reparse-symbol function_parameters) [15504 15507])
                            ("default" variable nil (reparse-symbol function_parameters) [15509 15516]))                          )
                        (reparse-symbol indented_block_body) [15483 15721]))                  
                :type "class")
                nil [12858 15721])
            ("MutableMapping" code nil nil [15722 15751])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16008 16012])
                            ("index" variable nil (reparse-symbol function_parameters) [16014 16019]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15972 16047])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16065 16069]))                          )
                        (reparse-symbol indented_block_body) [16052 16244])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16266 16270])
                            ("value" variable nil (reparse-symbol function_parameters) [16272 16277]))                          )
                        (reparse-symbol indented_block_body) [16249 16379])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16401 16405]))                          )
                        (reparse-symbol indented_block_body) [16384 16479])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16494 16498])
                            ("value" variable nil (reparse-symbol function_parameters) [16500 16505]))                          )
                        (reparse-symbol indented_block_body) [16484 16761])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16776 16780])
                            ("value" variable nil (reparse-symbol function_parameters) [16782 16787]))                          )
                        (reparse-symbol indented_block_body) [16766 16917]))                  
                :type "class")
                nil [15774 16917])
            ("Sequence" code nil nil [16918 16942])
            ("Sequence" code nil nil [16943 16972])
            ("Sequence" code nil nil [16973 16998])
            ("Sequence" code nil nil [16999 17024])
            ("MutableSequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().

    "
                :superclasses ("Sequence")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17287 17291])
                            ("index" variable nil (reparse-symbol function_parameters) [17293 17298])
                            ("value" variable nil (reparse-symbol function_parameters) [17300 17305]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17251 17333])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17374 17378])
                            ("index" variable nil (reparse-symbol function_parameters) [17380 17385]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17338 17413])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17449 17453])
                            ("index" variable nil (reparse-symbol function_parameters) [17455 17460])
                            ("value" variable nil (reparse-symbol function_parameters) [17462 17467]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17418 17559])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17575 17579])
                            ("value" variable nil (reparse-symbol function_parameters) [17581 17586]))                          )
                        (reparse-symbol indented_block_body) [17564 17698])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17715 17719]))                          )
                        (reparse-symbol indented_block_body) [17703 17874])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17890 17894])
                            ("values" variable nil (reparse-symbol function_parameters) [17896 17902]))                          )
                        (reparse-symbol indented_block_body) [17879 18045])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18058 18062])
                            ("index" variable nil (reparse-symbol function_parameters) [18064 18069]))                          )
                        (reparse-symbol indented_block_body) [18050 18308])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18324 18328])
                            ("value" variable nil (reparse-symbol function_parameters) [18330 18335]))                          )
                        (reparse-symbol indented_block_body) [18313 18507])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18525 18529])
                            ("values" variable nil (reparse-symbol function_parameters) [18531 18537]))                          )
                        (reparse-symbol indented_block_body) [18512 18588]))                  
                :type "class")
                nil [17027 18588])
            ("MutableSequence" code nil nil [18589 18619]))          
      :file "_abcoll.py"
      :pointmax 18620
      :fsize 18619
      :lastmodtime '(24343 10969 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1f1d408"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Keywords (from \"graminit.c\")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    ./python Lib/keyword.py
\"\"\"" code nil nil [24 281])
            ("__all__" variable nil nil [283 316])
            ("kwlist" variable nil nil [318 881])
            ("iskeyword" variable nil nil [883 925])
            ("main" function nil nil [927 1957])
            ("if" code nil nil [1958 1996]))          
      :file "keyword.py"
      :pointmax 1996
      :fsize 1995
      :lastmodtime '(24343 11061 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1f2476c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
\"\"\"" code nil nil [28 1297])
            ("__about__" variable nil nil [1381 6117])
            ("__all__" variable nil nil [6119 6238])
            ("itertools" include nil nil [6240 6299])
            ("operator" include nil nil [6300 6331])
            ("cmp_lt" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6344 6345])
                ("y" variable nil (reparse-symbol function_parameters) [6347 6348]))              ) nil [6333 6510])
            ("heappush" function
               (:documentation "Push item onto heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6524 6528])
                    ("item" variable nil (reparse-symbol function_parameters) [6530 6534]))                  )
                nil [6511 6658])
            ("heappop" function
               (:documentation "Pop the smallest item off the heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6671 6675]))                  )
                nil [6659 6987])
            ("heapreplace" function
               (:documentation "Pop and return the current smallest value, and add the new item.

    This is more efficient than heappop() followed by heappush(), and can be
    more appropriate when using a fixed-size heap.  Note that the value
    returned may be larger than item!  That constrains reasonable uses of
    this routine unless written as part of a conditional replacement:

        if item > heap[0]:
            item = heapreplace(heap, item)
    "
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7004 7008])
                    ("item" variable nil (reparse-symbol function_parameters) [7010 7014]))                  )
                nil [6988 7601])
            ("heappushpop" function
               (:documentation "Fast version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7618 7622])
                    ("item" variable nil (reparse-symbol function_parameters) [7624 7628]))                  )
                nil [7602 7809])
            ("heapify" function
               (:documentation "Transform list into a heap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7822 7823]))                  )
                nil [7810 8338])
            ("_heappushpop_max" function
               (:documentation "Maxheap version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [8360 8364])
                    ("item" variable nil (reparse-symbol function_parameters) [8366 8370]))                  )
                nil [8339 8558])
            ("_heapify_max" function
               (:documentation "Transform list into a maxheap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [8576 8577]))                  )
                nil [8559 8727])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8741 8742])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8744 8752]))                  )
                nil [8728 9152])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [9167 9168])
                    ("iterable" variable nil (reparse-symbol function_parameters) [9170 9178]))                  )
                nil [9153 9563])
            ("_siftdown" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [9747 9751])
                ("startpos" variable nil (reparse-symbol function_parameters) [9753 9761])
                ("pos" variable nil (reparse-symbol function_parameters) [9763 9766]))              ) nil [9733 10138])
            ("_siftup" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12213 12217])
                ("pos" variable nil (reparse-symbol function_parameters) [12219 12222]))              ) nil [12201 12941])
            ("_siftdown_max" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12960 12964])
                ("startpos" variable nil (reparse-symbol function_parameters) [12966 12974])
                ("pos" variable nil (reparse-symbol function_parameters) [12976 12979]))              ) nil [12942 13386])
            ("_siftup_max" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [13403 13407])
                ("pos" variable nil (reparse-symbol function_parameters) [13409 13412]))              ) nil [13387 14165])
            ("try" code nil nil [14203 14262])
            ("merge" function (:arguments 
              ( ("iterables" variable nil (reparse-symbol function_parameters) [14273 14283]))              ) nil [14263 15563])
            ("_nsmallest" variable nil nil [15642 15664])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [15679 15680])
                    ("iterable" variable nil (reparse-symbol function_parameters) [15682 15690])
                    ("key" variable nil (reparse-symbol function_parameters) [15692 15695]))                  )
                nil [15665 16816])
            ("_nlargest" variable nil nil [16817 16837])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [16851 16852])
                    ("iterable" variable nil (reparse-symbol function_parameters) [16854 16862])
                    ("key" variable nil (reparse-symbol function_parameters) [16864 16867]))                  )
                nil [16838 18014])
            ("if" code nil nil [18015 18296]))          
      :file "heapq.py"
      :pointmax 18296
      :fsize 18295
      :lastmodtime '(24343 10970 0 0)
      :unmatched-syntax '((RETURN 6453 . 6459) (IF 6468 . 6470) (ELSE 6492 . 6496)))
    (semanticdb-table "semanticdb-table-22ca40c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("types" include nil nil [161 173])
            ("_weakrefset" include nil nil [175 206])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [238 253])
            ("_InstanceType" variable nil nil [253 279])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [301 308]))                  )
                nil [282 876])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1742 1769]))                  
                :type "class")
                nil [878 1770])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2614 2643])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2661 2665])
                        ("name" variable nil (reparse-symbol function_parameters) [2667 2671])
                        ("bases" variable nil (reparse-symbol function_parameters) [2673 2678])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2680 2689]))                      ) (reparse-symbol indented_block_body) [2649 3526])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3544 3547])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3549 3557]))                          )
                        (reparse-symbol indented_block_body) [3531 4266])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4290 4293])
                            ("file" variable nil (reparse-symbol function_parameters) [4295 4299]))                          )
                        (reparse-symbol indented_block_body) [4271 4698])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4725 4728])
                            ("instance" variable nil (reparse-symbol function_parameters) [4730 4738]))                          )
                        (reparse-symbol indented_block_body) [4703 5559])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5586 5589])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5591 5599]))                          )
                        (reparse-symbol indented_block_body) [5564 7146]))                  
                :type "class")
                nil [1772 7146]))          
      :file "abc.py"
      :pointmax 7146
      :fsize 7145
      :lastmodtime '(24343 10969 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-2c6811c"
      :major-mode python-mode
      :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [543 582]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [483 487])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [489 502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [470 583])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [602 606]))                          )
                        (reparse-symbol indented_block_body) [588 723])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [741 745])
                            ("e" variable nil (reparse-symbol function_parameters) [747 748])
                            ("t" variable nil (reparse-symbol function_parameters) [750 751])
                            ("b" variable nil (reparse-symbol function_parameters) [753 754]))                          )
                        (reparse-symbol indented_block_body) [728 931]))                  
                :type "class")
                nil [195 931])
            ("WeakSet" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [999 1016])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1037 1041])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1043 1050]))                              ) (reparse-symbol indented_block_body) [1025 1283])
                            ("self" variable nil (reparse-symbol indented_block_body) [1291 1313])
                            ("self" variable nil (reparse-symbol indented_block_body) [1361 1388])
                            ("self" variable nil (reparse-symbol indented_block_body) [1397 1420])
                            ("if" code nil (reparse-symbol indented_block_body) [1429 1480]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977])
                            ("data" variable nil (reparse-symbol function_parameters) [979 983]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [960 1480])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1506 1510]))                          )
                        (reparse-symbol indented_block_body) [1485 1630])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1648 1652]))                          )
                        (reparse-symbol indented_block_body) [1635 1965])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1982 1986]))                          )
                        (reparse-symbol indented_block_body) [1970 2049])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2071 2075])
                            ("item" variable nil (reparse-symbol function_parameters) [2077 2081]))                          )
                        (reparse-symbol indented_block_body) [2054 2206])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2226 2230]))                          )
                        (reparse-symbol indented_block_body) [2211 2329])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2334 2349])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2363 2367])
                            ("item" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2355 2494])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2509 2513]))                          )
                        (reparse-symbol indented_block_body) [2499 2613])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2627 2631]))                          )
                        (reparse-symbol indented_block_body) [2618 2670])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2683 2687]))                          )
                        (reparse-symbol indented_block_body) [2675 3016])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3032 3036])
                            ("item" variable nil (reparse-symbol function_parameters) [3038 3042]))                          )
                        (reparse-symbol indented_block_body) [3021 3152])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3169 3173])
                            ("item" variable nil (reparse-symbol function_parameters) [3175 3179]))                          )
                        (reparse-symbol indented_block_body) [3157 3290])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3306 3310])
                            ("other" variable nil (reparse-symbol function_parameters) [3312 3317]))                          )
                        (reparse-symbol indented_block_body) [3295 3451])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3468 3472])
                            ("other" variable nil (reparse-symbol function_parameters) [3474 3479]))                          )
                        (reparse-symbol indented_block_body) [3456 3529])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3549 3553])
                            ("other" variable nil (reparse-symbol function_parameters) [3555 3560]))                          )
                        (reparse-symbol indented_block_body) [3534 3654])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3658 3678])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3706 3710])
                            ("other" variable nil (reparse-symbol function_parameters) [3712 3717]))                          )
                        (reparse-symbol indented_block_body) [3684 3749])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3766 3770])
                            ("other" variable nil (reparse-symbol function_parameters) [3772 3777]))                          )
                        (reparse-symbol indented_block_body) [3753 4010])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4032 4036])
                            ("other" variable nil (reparse-symbol function_parameters) [4038 4043]))                          )
                        (reparse-symbol indented_block_body) [4015 4116])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [4120 4142])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4172 4176])
                            ("other" variable nil (reparse-symbol function_parameters) [4178 4183]))                          )
                        (reparse-symbol indented_block_body) [4148 4215])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4232 4236])
                            ("other" variable nil (reparse-symbol function_parameters) [4238 4243]))                          )
                        (reparse-symbol indented_block_body) [4219 4404])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4422 4426])
                            ("other" variable nil (reparse-symbol function_parameters) [4428 4433]))                          )
                        (reparse-symbol indented_block_body) [4409 4499])
                    ("__le__" variable nil (reparse-symbol indented_block_body) [4503 4520])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4537 4541])
                            ("other" variable nil (reparse-symbol function_parameters) [4543 4548]))                          )
                        (reparse-symbol indented_block_body) [4526 4611])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4631 4635])
                            ("other" variable nil (reparse-symbol function_parameters) [4637 4642]))                          )
                        (reparse-symbol indented_block_body) [4616 4710])
                    ("__ge__" variable nil (reparse-symbol indented_block_body) [4714 4733])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4750 4754])
                            ("other" variable nil (reparse-symbol function_parameters) [4756 4761]))                          )
                        (reparse-symbol indented_block_body) [4739 4824])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4840 4844])
                            ("other" variable nil (reparse-symbol function_parameters) [4846 4851]))                          )
                        (reparse-symbol indented_block_body) [4829 4999])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5015 5019])
                            ("other" variable nil (reparse-symbol function_parameters) [5021 5026]))                          )
                        (reparse-symbol indented_block_body) [5004 5168])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5198 5202])
                            ("other" variable nil (reparse-symbol function_parameters) [5204 5209]))                          )
                        (reparse-symbol indented_block_body) [5173 5313])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5317 5347])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5385 5389])
                            ("other" variable nil (reparse-symbol function_parameters) [5391 5396]))                          )
                        (reparse-symbol indented_block_body) [5353 5428])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5445 5449])
                            ("other" variable nil (reparse-symbol function_parameters) [5451 5456]))                          )
                        (reparse-symbol indented_block_body) [5432 5713])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5728 5732])
                            ("other" variable nil (reparse-symbol function_parameters) [5734 5739]))                          )
                        (reparse-symbol indented_block_body) [5718 5809])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [5813 5827])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5848 5852])
                            ("other" variable nil (reparse-symbol function_parameters) [5854 5859]))                          )
                        (reparse-symbol indented_block_body) [5833 5912]))                  
                :type "class")
                nil [933 5912]))          
      :file "_weakrefset.py"
      :pointmax 5912
      :fsize 5911
      :lastmodtime '(24343 10969 0 0)
      :unmatched-syntax nil))
  :file "!usr!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
