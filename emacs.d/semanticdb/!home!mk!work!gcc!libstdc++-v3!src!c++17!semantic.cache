;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("filesystem" include (:system-flag t) nil [1169 1190])
            ("utility" include (:system-flag t) nil [1191 1209])
            ("stack" include (:system-flag t) nil [1210 1226])
            ("string.h" include (:system-flag t) nil [1227 1246])
            ("errno.h" include (:system-flag t) nil [1247 1265])
            ("_GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM" variable (:constant-flag t) nil [1274 1309])
            ("_GLIBCXX_END_NAMESPACE_FILESYSTEM" variable (:constant-flag t) nil [1341 1374])
            ("../filesystem/dir-common.h" include nil nil [1377 1414])
            ("fs" type
               (:kind alias
                :members 
                  ( ("std::filesystem" type (:type "namespace") nil nil))                  
                :type "namespace")
                nil [1416 1447])
            ("posix" type
               (:kind alias
                :members 
                  ( ("std::filesystem::__gnu_posix" type (:type "namespace") nil nil))                  
                :type "namespace")
                nil [1448 1495])
            ("__shared_ptr" type
               (:parent "std"
                :prototype t
                :template-specifier 
                  ( ("fs::_Dir" type nil nil nil))                  
                :type "class")
                nil [1506 1540])
            ("__shared_ptr" type
               (:parent "std"
                :prototype t
                :template-specifier 
                  ( ("fs::recursive_directory_iterator::_Dir_stack" type nil nil nil))                  
                :type "class")
                nil [1550 1620])
            ("_Dir" type
               (:parent "fs"
                :superclasses 
                  ( ("_Dir_base" type
                       (:protection "unspecified"
                        :type "class")
                        nil nil))                  
                :members 
                  ( ("_Dir" function
                       (:constructor-flag t
                        :arguments 
                          ( ("p" variable
                               (:reference 1
                                :constant-flag t
                                :type ("fs::path" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1659 1677])
                            ("skip_permission_denied" variable (:type "bool") (reparse-symbol arg-sub-list) [1678 1706])
                            ("ec" variable
                               (:reference 1
                                :type ("error_code" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1707 1722]))                          
                        :type ("_Dir" type (:type "struct") nil nil))
                        (reparse-symbol classsubparts) [1654 1812])
                    ("_Dir" function
                       (:constructor-flag t
                        :arguments 
                          ( ("dirp" variable
                               (:pointer 1
                                :type ("posix::DIR" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1821 1838])
                            ("p" variable
                               (:reference 1
                                :constant-flag t
                                :type ("path" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1839 1853]))                          
                        :type ("_Dir" type (:type "struct") nil nil))
                        (reparse-symbol classsubparts) [1816 1884])
                    ("advance" function
                       (:arguments 
                          ( ("skip_permission_denied" variable
                               (:default-value "false"
                                :type "bool")
                                (reparse-symbol arg-sub-list) [2786 2821]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [2773 3031])
                    ("should_recurse" function
                       (:methodconst-flag t
                        :arguments 
                          ( ("follow_symlink" variable (:type "bool") (reparse-symbol arg-sub-list) [3055 3075])
                            ("ec" variable
                               (:reference 1
                                :type ("error_code" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [3076 3091]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [3035 3436])
                    ("path" variable (:type ("fs::path" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3440 3455])
                    ("entry" variable (:type ("directory_entry" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3458 3480]))                  
                :type "struct")
                nil [1622 3483])
            ("unnamed" type
               (:members 
                  ( ("is_set" function
                       (:template 
                          ( ("Bitmask" type (:type "class") nil nil))                          
                        :type "bool"
                        :arguments 
                          ( ("obj" variable (:type ("Bitmask" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3553 3565])
                            ("bits" variable (:type ("Bitmask" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3566 3579]))                          
                        :typemodifiers ("inline"))
                        (reparse-symbol namespacesubparts) [3499 3635]))                  
                :type "namespace")
                nil [3485 3637])
            ("directory_iterator" function
               (:parent "fs::directory_iterator"
                :arguments 
                  ( ("p" variable
                       (:reference 1
                        :constant-flag t
                        :type ("path" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3683 3697])
                    ("options" variable (:type ("directory_options" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3698 3724])
                    ("ecptr" variable
                       (:pointer 1
                        :type ("error_code" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3725 3743]))                  
                :type "int")
                nil [3639 4221])
            ("" function
               (:methodconst-flag t
                :operator-flag t
                :function-pointer t
                :parent "fs::directory_iterator"
                :constant-flag t
                :type ("fs::directory_entry" type (:type "class") nil nil))
                nil [4223 4476])
            ("++" function
               (:operator-flag t
                :parent "fs::directory_iterator"
                :type ("fs::directory_iterator" type (:type "class") nil nil))
                nil [4478 4776])
            ("increment" function
               (:parent "fs::directory_iterator"
                :arguments 
                  ( ("ec" variable
                       (:reference 1
                        :type ("error_code" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4836 4851]))                  
                :type ("fs::directory_iterator" type (:type "class") nil nil))
                nil [4778 5023])
            ("_Dir_stack" type
               (:parent "fs::recursive_directory_iterator"
                :superclasses 
                  ( ("std::stack" type
                       (:protection "unspecified"
                        :type "class")
                        nil nil))                  
                :members 
                  ( ("_Dir_stack" function
                       (:constructor-flag t
                        :arguments 
                          ( ("opts" variable (:type ("directory_options" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5111 5134])
                            ("dirp" variable
                               (:pointer 1
                                :type ("posix::DIR" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5135 5152])
                            ("p" variable
                               (:reference 1
                                :constant-flag t
                                :type ("path" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5153 5167]))                          
                        :type ("_Dir_stack" type (:type "struct") nil nil))
                        (reparse-symbol classsubparts) [5100 5236])
                    ("options" variable
                       (:constant-flag t
                        :type ("directory_options" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [5240 5272])
                    ("pending" variable (:type "bool") (reparse-symbol classsubparts) [5275 5288])
                    ("clear" function (:type "void") (reparse-symbol classsubparts) [5292 5319]))                  
                :type "struct")
                nil [5025 5322])
            ("recursive_directory_iterator" function
               (:parent "fs::recursive_directory_iterator"
                :arguments 
                  ( ("p" variable
                       (:reference 1
                        :constant-flag t
                        :type ("path" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5388 5402])
                    ("options" variable (:type ("directory_options" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5403 5429])
                    ("ecptr" variable
                       (:pointer 1
                        :type ("error_code" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5459 5477]))                  
                :type "int")
                nil [5324 6159])
            ("++" function
               (:operator-flag t
                :parent "fs::recursive_directory_iterator"
                :type ("fs::recursive_directory_iterator" type (:type "class") nil nil))
                nil [6964 7212])
            ("increment" function
               (:parent "fs::recursive_directory_iterator"
                :arguments 
                  ( ("ec" variable
                       (:reference 1
                        :type ("error_code" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7292 7307]))                  
                :type ("fs::recursive_directory_iterator" type (:type "class") nil nil))
                nil [7214 8112])
            ("pop" function
               (:parent "fs::recursive_directory_iterator"
                :arguments 
                  ( ("ec" variable
                       (:reference 1
                        :type ("error_code" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8157 8172]))                  
                :type "void")
                nil [8114 8562])
            ("pop" function
               (:parent "fs::recursive_directory_iterator"
                :type "void")
                nil [8564 8827]))          
      :file "fs_dir.cc"
      :pointmax 8937
      :fsize 8936
      :lastmodtime '(23951 21818 158363 799000)
      :unmatched-syntax '((semantic-list 8905 . 8936) (symbol 8896 . 8904) (semantic-list 8893 . 8895) (symbol 8868 . 8893) (punctuation 8867 . 8868) (punctuation 8866 . 8867) (symbol 8838 . 8866) (punctuation 8837 . 8838) (punctuation 8836 . 8837) (symbol 8834 . 8836) (VOID 8829 . 8833) (punctuation 6961 . 6962) (DEFAULT 6954 . 6961) (punctuation 6952 . 6953) (symbol 6943 . 6951) (semantic-list 6904 . 6942) (punctuation 6903 . 6904) (OPERATOR 6895 . 6903) (punctuation 6934 . 6935) (punctuation 6893 . 6894) (punctuation 6892 . 6893) (symbol 6864 . 6892) (punctuation 6934 . 6935) (punctuation 6863 . 6864) (punctuation 6862 . 6863) (symbol 6860 . 6862) (punctuation 6934 . 6935) (punctuation 6858 . 6859) (symbol 6830 . 6858) (punctuation 6934 . 6935) (punctuation 6829 . 6830) (punctuation 6828 . 6829) (symbol 6826 . 6828) (punctuation 6934 . 6935) (punctuation 6823 . 6824) (DEFAULT 6816 . 6823) (punctuation 6814 . 6815) (symbol 6805 . 6813) (semantic-list 6761 . 6804) (punctuation 6760 . 6761) (OPERATOR 6752 . 6760) (punctuation 6750 . 6751) (punctuation 6749 . 6750) (symbol 6721 . 6749) (punctuation 6720 . 6721) (punctuation 6719 . 6720) (symbol 6717 . 6719) (punctuation 6715 . 6716) (symbol 6687 . 6715) (punctuation 6686 . 6687) (punctuation 6685 . 6686) (symbol 6683 . 6685) (semantic-list 6647 . 6681) (symbol 6638 . 6646) (CONST 6632 . 6637) (semantic-list 6629 . 6631) (punctuation 6628 . 6629) (OPERATOR 6620 . 6628) (punctuation 6619 . 6620) (punctuation 6618 . 6619) (symbol 6590 . 6618) (punctuation 6589 . 6590) (punctuation 6588 . 6589) (symbol 6586 . 6588) (punctuation 6584 . 6585) (symbol 6569 . 6584) (punctuation 6568 . 6569) (punctuation 6567 . 6568) (symbol 6565 . 6567) (CONST 6559 . 6564) (semantic-list 6527 . 6557) (symbol 6518 . 6526) (CONST 6512 . 6517) (semantic-list 6509 . 6511) (symbol 6492 . 6509) (punctuation 6491 . 6492) (punctuation 6490 . 6491) (symbol 6462 . 6490) (punctuation 6461 . 6462) (punctuation 6460 . 6461) (symbol 6458 . 6460) (BOOL 6453 . 6457) (semantic-list 6413 . 6451) (symbol 6404 . 6412) (CONST 6398 . 6403) (semantic-list 6395 . 6397) (symbol 6390 . 6395) (punctuation 6389 . 6390) (punctuation 6388 . 6389) (symbol 6360 . 6388) (punctuation 6359 . 6360) (punctuation 6358 . 6359) (symbol 6356 . 6358) (INT 6352 . 6355) (semantic-list 6320 . 6350) (symbol 6311 . 6319) (CONST 6305 . 6310) (semantic-list 6302 . 6304) (symbol 6295 . 6302) (punctuation 6294 . 6295) (punctuation 6293 . 6294) (symbol 6265 . 6293) (punctuation 6264 . 6265) (punctuation 6263 . 6264) (symbol 6261 . 6263) (symbol 6243 . 6260) (punctuation 6242 . 6243) (punctuation 6241 . 6242) (symbol 6239 . 6241) (punctuation 6236 . 6237) (DEFAULT 6229 . 6236) (punctuation 6227 . 6228) (semantic-list 6224 . 6226) (symbol 6196 . 6224) (punctuation 6195 . 6196) (punctuation 6194 . 6195) (punctuation 6193 . 6194) (symbol 6165 . 6193) (punctuation 6164 . 6165) (punctuation 6163 . 6164) (symbol 6161 . 6163) (semantic-list 2637 . 2667) (symbol 2628 . 2636) (semantic-list 2611 . 2627) (symbol 2604 . 2611) (BOOL 2599 . 2603) (semantic-list 2088 . 2595) (symbol 2077 . 2085) (semantic-list 2031 . 2076) (symbol 2024 . 2031) (BOOL 2019 . 2023) (punctuation 1910 . 1911) (DEFAULT 1903 . 1910) (punctuation 1901 . 1902) (semantic-list 1892 . 1900) (symbol 1888 . 1892) (punctuation 1898 . 1899) (TEMPLATE 1541 . 1549) (TEMPLATE 1497 . 1505) (semantic-list 8905 . 8936) (symbol 8896 . 8904) (semantic-list 8893 . 8895) (symbol 8868 . 8893) (punctuation 8867 . 8868) (punctuation 8866 . 8867) (symbol 8838 . 8866) (punctuation 8837 . 8838) (punctuation 8836 . 8837) (symbol 8834 . 8836) (VOID 8829 . 8833) (punctuation 6961 . 6962) (DEFAULT 6954 . 6961) (punctuation 6952 . 6953) (symbol 6943 . 6951) (semantic-list 6904 . 6942) (punctuation 6903 . 6904) (OPERATOR 6895 . 6903) (punctuation 6934 . 6935) (punctuation 6893 . 6894) (punctuation 6892 . 6893) (symbol 6864 . 6892) (punctuation 6934 . 6935) (punctuation 6863 . 6864) (punctuation 6862 . 6863) (symbol 6860 . 6862) (punctuation 6934 . 6935) (punctuation 6858 . 6859) (symbol 6830 . 6858) (punctuation 6934 . 6935) (punctuation 6829 . 6830) (punctuation 6828 . 6829) (symbol 6826 . 6828) (punctuation 6934 . 6935) (punctuation 6823 . 6824) (DEFAULT 6816 . 6823) (punctuation 6814 . 6815) (symbol 6805 . 6813) (semantic-list 6761 . 6804) (punctuation 6760 . 6761) (OPERATOR 6752 . 6760) (punctuation 6750 . 6751) (punctuation 6749 . 6750) (symbol 6721 . 6749) (punctuation 6720 . 6721) (punctuation 6719 . 6720) (symbol 6717 . 6719) (punctuation 6715 . 6716) (symbol 6687 . 6715) (punctuation 6686 . 6687) (punctuation 6685 . 6686) (symbol 6683 . 6685) (semantic-list 6647 . 6681) (symbol 6638 . 6646) (CONST 6632 . 6637) (semantic-list 6629 . 6631) (punctuation 6628 . 6629) (OPERATOR 6620 . 6628) (punctuation 6619 . 6620) (punctuation 6618 . 6619) (symbol 6590 . 6618) (punctuation 6589 . 6590) (punctuation 6588 . 6589) (symbol 6586 . 6588) (punctuation 6584 . 6585) (symbol 6569 . 6584) (punctuation 6568 . 6569) (punctuation 6567 . 6568) (symbol 6565 . 6567) (CONST 6559 . 6564) (semantic-list 6527 . 6557) (symbol 6518 . 6526) (CONST 6512 . 6517) (semantic-list 6509 . 6511) (symbol 6492 . 6509) (punctuation 6491 . 6492) (punctuation 6490 . 6491) (symbol 6462 . 6490) (punctuation 6461 . 6462) (punctuation 6460 . 6461) (symbol 6458 . 6460) (BOOL 6453 . 6457) (semantic-list 6413 . 6451) (symbol 6404 . 6412) (CONST 6398 . 6403) (semantic-list 6395 . 6397) (symbol 6390 . 6395) (punctuation 6389 . 6390) (punctuation 6388 . 6389) (symbol 6360 . 6388) (punctuation 6359 . 6360) (punctuation 6358 . 6359) (symbol 6356 . 6358) (INT 6352 . 6355) (semantic-list 6320 . 6350) (symbol 6311 . 6319) (CONST 6305 . 6310) (semantic-list 6302 . 6304) (symbol 6295 . 6302) (punctuation 6294 . 6295) (punctuation 6293 . 6294) (symbol 6265 . 6293) (punctuation 6264 . 6265) (punctuation 6263 . 6264) (symbol 6261 . 6263) (symbol 6243 . 6260) (punctuation 6242 . 6243) (punctuation 6241 . 6242) (symbol 6239 . 6241) (punctuation 6236 . 6237) (DEFAULT 6229 . 6236) (punctuation 6227 . 6228) (semantic-list 6224 . 6226) (symbol 6196 . 6224) (punctuation 6195 . 6196) (punctuation 6194 . 6195) (punctuation 6193 . 6194) (symbol 6165 . 6193) (punctuation 6164 . 6165) (punctuation 6163 . 6164) (symbol 6161 . 6163) (semantic-list 2637 . 2667) (symbol 2628 . 2636) (semantic-list 2611 . 2627) (symbol 2604 . 2611) (BOOL 2599 . 2603) (semantic-list 2088 . 2595) (symbol 2077 . 2085) (semantic-list 2031 . 2076) (symbol 2024 . 2031) (BOOL 2019 . 2023) (punctuation 1910 . 1911) (DEFAULT 1903 . 1910) (punctuation 1901 . 1902) (semantic-list 1892 . 1900) (symbol 1888 . 1892) (punctuation 1898 . 1899) (TEMPLATE 1541 . 1549) (TEMPLATE 1497 . 1505))
      :lexical-table 
        '(("_GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM" . 
              ((NAMESPACE "namespace" 1310 . 1319) (symbol "filesystem" 1320 . 1330) (open-paren "{" 1331 . 1332)))
          ("_GLIBCXX_END_NAMESPACE_FILESYSTEM" . ((close-paren "}" 1375 . 1376)))
          )
))
  :file "!home!mk!work!gcc!libstdc++-v3!src!c++17!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
