"============================================================================
" Basic options
"============================================================================
"
set number                  "nu : show line
set smartcase
set ruler                   "ru : inform cursor position in right below side
set nowrapscan
"set background=dark
"set shiftwidth=2
"set smartindent
set tabstop=2
set expandtab
set shiftwidth=2
set ignorecase              "dont distinguish capital and little during searching
set hlsearch                "highlight to searched string"
set showmatch               "show coupled pharenthisis
set magic                   "use special character in searching pattern
set title
set nobackup                "dont make backup file
set noswapfile              "dont make backup file
"set backupdir=~/.vim/temp/backup
"set directory=~/.vim/temp/swap
set cursorline              "show curson location at the time
set sc                      "show command under the window
set fdm=manual              "code editing way : manual, indent, expr, marker, syntax, diff
set fencs=utf-8,euc-kr,cp949,cp932,euc-jp,shift-jis,big5,latin1,ucs-2le
set enc=utf-8
set tenc=utf-8
set encoding=utf-8
set nocul                   "highlighting word on cursor
set fileformat=unix
set mouse=a
set backspace=indent,eol,start whichwrap+=<,>,[,]
set belloff=all
"set km=startsel,stopesel    "use shift to select blocks
"filetype on
filetype plugin indent on
let mapleader = ";"
"set paste
"set guioptions=gmrL        "eliminate tool box
"set guifont=Dina:h9:cANSI
"set comments=sl:/*,mb:*,elx:*/
"set loadplugins
"set mousemodel=popup
"set visualbell             "vb : there will be visual effect rather than beeping when you input wrong key
"set comments=sl:/*,mb:*,elx:*/
"set loadplugins
"set fillchars+=stl:\ ,stlnc:\
set helplang=ko
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

Plugin 'vim-airline/vim-airline'
Plugin 'scrooloose/nerdcommenter'
Plugin 'majutsushi/tagbar'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'https://tpope.io/vim/fugitive.git'
Plugin 'OmniCppComplete'
"Plugin 'rip-rip/clang_complete'

call vundle#end()            " required
filetype plugin indent on    " required





"============================================================================
" Mikki Command 
"============================================================================
":%!xxd : show as hex
":%!xxd -r : show as text





"============================================================================
" Color
"============================================================================

"colorscheme torte
"colorscheme ambient 
"colorscheme molokai
colorscheme minimalist
set t_Co=256
syntax on

"hi ModeMsg ctermfg=2 ctermbg=0
"hi Todo ctermfg=4 ctermbg=0
"hi Include ctermfg=4 ctermbg=0
"hi PreProc ctermfg=4 ctermbg=0
"hi Comment ctermfg=4 ctermbg=0
"hi Normal ctermfg=6 ctermbg=0
"hi Type ctermfg=6 ctermbg=0
"hi Function ctermfg=3 ctermbg=0
"hi Special ctermfg=3 ctermbg=0
"hi Statement ctermfg=6 ctermbg=0
"hi Pmenu ctermbg=1
"hi Title ctermfg=4 ctermbg=0
"hi treePart ctermfg=2 ctermbg=0
"hi treeDir ctermfg=2 ctermbg=0
"hi treeFile ctermfg=4 ctermbg=0
"hi Search term=reverse ctermfg=9 ctermbg=1

"xming setting
"colorscheme jellybeans
"syntax on
"hi ModeMsg ctermfg=2 ctermbg=0





"============================================================================
" Toggle Key options
"============================================================================

call feedkeys(":TagbarToggle\<cr>", 'n')

"nmap <F2> :bp<cr>
"nmap <F3> :bn<cr>
nmap <F2> <C-W>p 
nmap <F3> <C-W>b 
nmap <F4> :w!<cr>
nmap <F5> :A<cr>
nmap <F6> :marks<cr>
nmap <F7> <Leader>bv
nmap <F8> z.:TlistSync<cr>
nmap <F9> :NERDTreeToggle<cr>:TagbarToggle<cr>
nmap <F11> :mkview<cr>:qa<cr>
nmap <F12> :%s/from/to/gc

nmap <PageUp> :bp<cr>
nmap <PageDown> :bn<cr>

noremap <C-A> gg<S-V>G
inoremap <C-A> <C-O>gg<C-O><S-V>G

map <leader>sp :sp<cr>
map <leader>vs :vs<cr>

"using tab
map <leader>tt :tabnew<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tc :tabclose<cr>

"using vimgrep
"map <leader>gl :cc<cr>
map <leader>gl :clist<cr>
map <leader>gr :crewind<cr>
"map <leader>gr :clast<cr>
map <leader>gn :cnext<cr>
map <leader>gp :cprevious<cr>

"using quickfix
"map <leader>ll :ll<cr>
map <leader>ll :llist<cr>
map <leader>lr :lrewind<cr>
"map <leader>lr :llast<cr>
map <leader>ln :lnext<cr>
map <leader>lp :lprevious<cr>

nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-L> <C-W>l

"make src.i before using below
"nmap <C-I> :vs<cr> echon system('grep -A2 -B2 "$(sed -n '.line(".").'p '.expand("%:p").'\|sed -e "s/^[ \t]\+//;s/\([]\*\.[]\)/\\\\\1/g;s/\(__\)\?[a-z][a-z_0-9]*(\(([u2346])\)\?[^)]*)/.*/g;s/__[a-z]\+/.*/g;s/[A-Z][A-Z_0-9]*/.*/g")" '.expand("%:p:r").'.i')<CR>
"nmap <C-O> :vs<cr> echon system('grep -A2 -B2 "$(sed -n '.line(".").'p '.expand("%:p").'\|sed -e "s/^[ \t]\+//;s/\([]\*\.[]\)/\\\\\1/g;s/[A-Z][A-Z_0-9]*/.*/g")" '.expand("%:p:r").'.i')<CR>

vnoremap <BS> d
vmap <Tab> >gv
vmap <S-Tab> <gv

cnoremap <C-A>		<Home>      "start of line
cnoremap <C-B>		<Left>      "back one character
cnoremap <C-D>		<Del>       "delete character under cursor
cnoremap <C-E>		<End>       "end of line
cnoremap <C-F>		<Right>     "forward one character
cnoremap <C-N>		<Down>      "recall newer command-line
cnoremap <C-P>		<Up>        "recall previous (older) command-line
cnoremap <Esc><C-B>	<S-Left>  "back one word
cnoremap <Esc><C-F>	<S-Right> "forward one word





"============================================================================
" coding
"============================================================================

let g:tagbar_left = 1
let NERDTreeWinPos = "right"

map <leader>ff :Files<cr>
map <leader>fb :Buffers<cr>
map <leader>fc :Commits<cr>
map <leader>fs :Snippets<cr>
map <leader>fh :History<cr>

let marksCloseWhenSeleted=0
autocmd BufNewFile,BufRead *.bat set filetype=bat

" auto close options when exiting insert mode
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif

" path to directory where library can be found
" let g:clang_library_path='/usr/local/lib'
"   " or path directly to the library file
" let g:clang_library_path='/usr/local/lib/libclang.so.7.0'
"
" -- configs --
let OmniCpp_NamespaceSearch = 1
let OmmniCpp_GlobalScopeSearch = 1
let OmniCpp_DisplayMode = 0
let OmniCpp_ShowScopeInAbbr = 0
let OmniCpp_ShowPrototypeInAbbr = 0
let OmniCpp_ShowAccess = 1
let OmniCpp_MayCompleteDot = 1
let OmniCpp_MayCompleteArrow = 1
let OmniCpp_MayCompleteScope = 1
"let OmniCpp_SelectFirstItem = 0
"let OmniCpp_LocalSearchDecl = 0
"let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD", "_GLIBCXX_STD_A", "_GLIBCXX_STD_C"]

set completeopt=menu,menuone,preview
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif



"============================================================================
" ctags, cscope initialization
"============================================================================
set tags+=./tags;
set tags+=/home/hyuk.myeong/.vim/cpp_tags;
"set tags+=/home/mk/.vim/tags/wtags;
"set isk+=:

au BufWritePost *.c,*.cc,*.cpp,*.h,*.hh silent! execute "!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q --exclude={.git,oe-workdir,oe-logs} >/dev/null 2>&1 &"

"" include all files in current directory
let &path = getcwd() . '/**'
"" deprecated
"let g:cwd = getcwd()
"exe 'set path+='.(g:cwd . "/source/include/private")
"exe 'set path+='.(g:cwd . "/source/include/public")
"
set path+=/pkg/qnx700_post_cs4_v06_208/target/qnx7/usr/include
set path+=/pkg/qnx700_post_cs4_v06_208/target/qnx7/usr/include/c++/5.4.0
set path+=/home/hyuk.myeong/work/I781_1112/Apps/source/install/build/usr/include


"cscope reset
"cscope show
"cscope kill
"cscope add

if has("cscope")
       set csprg=/usr/bin/cscope
       set csto=0
       set cst
       set nocsverb
       set cscopetag

       if filereadable("./cscope.out")
         cs add ./cscope.out . -C
       elseif filereadable("../cscope.out")
         cs add ../cscope.out . -C
       elseif filereadable("../../cscope.out")
         cs add ../../cscope.out . -C
       elseif filereadable("../../../cscope.out")
         cs add ../../../cscope.out . -C
       elseif filereadable("../../../../cscope.out")
         cs add ../../../../cscope.out . -C
       elseif filereadable("../../../../../cscope.out")
         cs add ../../../../../cscope.out . -C
       elseif filereadable("../../../../../../cscope.out")
         cs add ../../../../../../cscope.out . -C
       else
         cs add /usr/src/linux/cscope.out
       endif

"       if $CSCOPE_DB != ""
"              cs add $CSCOPE_DB
"       endif

       if version >= 500
         func! Sts()
           let st = expand("<cword>")
           exe "sts ".st
         endfunc
         nmap ;st :call Sts()<cr>

         func! Tj()
           let tj = expand("<cword>")
           exe "tj ".tj
         endfunc
         nmap ;tj :call Tj()<cr>
       endif

       func! Css()
         let css = expand("<cword>")
"         new
         exe "cs find s .*".css

         if getline(1) == ""
           exe "q!"
         endif
       endfunc
       nmap ;css :call Css()<cr>

       func! Csc()
         let csc = expand("<cword>")
"         new
         exe "cs find c .*".csc

         if getline(1) == ""
           exe "q!"
         endif
       endfunc
       nmap ;csc :call Csc()<cr>

       func! Csd()
         let csd = expand("<cword>")
"         new
         exe "cs find d .*".csd

         if getline(1) == ""
           exe "q!"
         endif
       endfunc
       nmap ;csd :call Csd()<cr>

       func! Csg()
         let csg = expand("<cword>")
"         new
         exe "cs find g .*".csg

         if getline(1) == ""
           exe "q!"
         endif
       endfunc
       nmap ;csg :call Csg()<cr>
endif

"============================================================================
" Functions
"============================================================================
let s:paren_hl_on = 0
function s:Highlight_Matching_Paren()
	if s:paren_hl_on
		match none
		let s:paren_hl_on = 0
	endif

	let c_lnum = line('.')
	let c_col = col('.')

	let c = getline(c_lnum)[c_col - 1]
	let plist = split(&matchpairs, ':\|,')
	let i = index(plist, c)
	if i < 0
		return
	endif
	if i % 2 == 0
		let s_flags = 'nW'
		let c2 = plist[i + 1]
	else
		let s_flags = 'nbW'
		let c2 = c
		let c = plist[i - 1]
	endif
	if c == '['
		let c = '\['
		let c2 = '\]'
	endif
	let s_skip ='synIDattr(synID(line("."), col("."), 0), "name") ' .
	\ '=~?	"string\\|comment"'
	execute 'if' s_skip '| let s_skip = 0 | endif'

	let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip)

	if m_lnum > 0 && m_lnum >= line('w0') && m_lnum <= line('w$')
		exe 'match Search /\(\%' . c_lnum . 'l\%' . c_col .
		\ 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
		let s:paren_hl_on = 1
	endif
endfunction

autocmd CursorMoved,CursorMovedI * call s:Highlight_Matching_Paren()
autocmd InsertEnter * match none


"============================================================================
" Deprecated
"============================================================================
"
"" removes trailing spaces
"function! TrimWhiteSpace()
"	    %s/\s\+$//e
"endfunction

"autocmd FileWritePre    * :call TrimWhiteSpace()
"autocmd FileAppendPre   * :call TrimWhiteSpace()
"autocmd FilterWritePre  * :call TrimWhiteSpace()
"autocmd BufWritePre     * :call TrimWhiteSpace()

"" tetris
"source ~/.vim/plugin/tetris.vim
