;; Object semanticdb-project-database-file-fbbc74
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-fbbc74"
  :tables
  (list
    (semanticdb-table "semanticdb-table-fd94fc"
      :major-mode c++-mode
      :tags 
        '( ("ARA_CRYPTO_COMMON_BASE_ID_TYPES_H_" variable (:constant-flag t) nil [2163 2197])
            ("std_api.h" include nil nil [2453 2473])
            ("guid.h" include nil nil [2474 2491])
            ("ara" type
               (:members 
                  ( ("crypto" type
                       (:members 
                          ( ("ActorUid" variable
                               (:default-value "Uuid"
                                :type "int")
                                (reparse-symbol namespacesubparts) [2912 2928])
                            ("CryptoProviderUid" variable
                               (:default-value "Uuid"
                                :type "int")
                                (reparse-symbol namespacesubparts) [3146 3171])
                            ("kAnyCryptoProvider" variable
                               (:constant-flag t
                                :default-value "Uuid()"
                                :type ("CryptoProviderUid" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [3366 3418])
                            ("LogicalSlotUid" variable
                               (:default-value "Uuid"
                                :type "int")
                                (reparse-symbol namespacesubparts) [3625 3647])
                            ("std::uint64_t" variable (:type "int") (reparse-symbol namespacesubparts) [3866 3880])
                            ("std::uint32_t" variable (:type "int") (reparse-symbol namespacesubparts) [4576 4590])
                            ("CryptoObjectType" type
                               (:superclasses 
                                  ( ("std::uint8_t" type
                                       (:protection "unspecified"
                                        :type "class")
                                        nil nil))                                  
                                :type "class")
                                (reparse-symbol namespacesubparts) [4863 5934])
                            ("ProviderType" type
                               (:superclasses 
                                  ( ("std::uint32_t" type
                                       (:protection "unspecified"
                                        :type "class")
                                        nil nil))                                  
                                :type "class")
                                (reparse-symbol namespacesubparts) [6174 6533])
                            ("kAlgIdUndefined" variable
                               (:constant-flag t
                                :default-value "0ULL"
                                :type ("CryptoAlgId" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [7506 7547])
                            ("kAlgIdAny" variable
                               (:constant-flag t
                                :default-value "kAlgIdUndefined"
                                :type ("CryptoAlgId" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [7664 7710])
                            ("kAlgIdDefault" variable
                               (:constant-flag t
                                :default-value "kAlgIdUndefined"
                                :type ("CryptoAlgId" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [7851 7901])
                            ("kAlgIdNone" variable
                               (:constant-flag t
                                :default-value "kAlgIdUndefined"
                                :type ("CryptoAlgId" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [8060 8107])
                            ("kAllowPrototypedOnly" variable
                               (:constant-flag t
                                :default-value "0L"
                                :type ("AllowedUsageFlags" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [8599 8649])
                            ("kAllowDataEncryption" variable
                               (:constant-flag t
                                :default-value "0x0001L"
                                :type ("AllowedUsageFlags" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [8864 8919])
                            ("kAllowDataDecryption" variable
                               (:constant-flag t
                                :default-value "0x0002L"
                                :type ("AllowedUsageFlags" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [9134 9189])
                            ("kAllowSignature" variable
                               (:constant-flag t
                                :default-value "0x0004L"
                                :type ("AllowedUsageFlags" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [9414 9464])
                            ("kAllowVerification" variable
                               (:constant-flag t
                                :default-value "0x0008L"
                                :type ("AllowedUsageFlags" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [9691 9744])
                            ("kAllowKeyAgreement" variable
                               (:constant-flag t
                                :default-value "0x0010L"
                                :type ("AllowedUsageFlags" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [9909 9962])
                            ("kAllowKeyDiversify" variable
                               (:constant-flag t
                                :default-value "0x0020L"
                                :type ("AllowedUsageFlags" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [10120 10173])
                            ("kAllowDrngInit" variable
                               (:constant-flag t
                                :default-value "0x0040L"
                                :type ("AllowedUsageFlags" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [10425 10474])
                            ("kAllowKdfMaterial" variable
                               (:constant-flag t
                                :default-value "0x0080L"
                                :type ("AllowedUsageFlags" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [10767 10819])
                            ("kAllowKeyExporting" variable
                               (:constant-flag t
                                :default-value "0x0100L"
                                :type ("AllowedUsageFlags" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [11051 11104])
                            ("kAllowKeyImporting" variable
                               (:constant-flag t
                                :default-value "0x0200L"
                                :type ("AllowedUsageFlags" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [11338 11391])
                            ("kAllowExactModeOnly" variable
                               (:constant-flag t
                                :default-value "0x8000L"
                                :type ("AllowedUsageFlags" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [11554 11608])
                            ("kAllowDerivedKeyImporting" variable (:type "int") (reparse-symbol namespacesubparts) [14889 14915]))                          
                        :type "namespace")
                        (reparse-symbol namespacesubparts) [2509 14949]))                  
                :type "namespace")
                nil [2493 14972]))          
      :file "base_id_types.h"
      :pointmax 15038
      :fsize 15037
      :lastmodtime '(24305 25427 901961 582000)
      :unmatched-syntax '((punctuation 14887 . 14888) (symbol 14861 . 14886) (punctuation 14859 . 14860) (symbol 14834 . 14858) (punctuation 14832 . 14833) (symbol 14810 . 14831) (punctuation 14808 . 14809) (symbol 14782 . 14807) (punctuation 14780 . 14781) (symbol 14754 . 14779) (punctuation 14752 . 14753) (symbol 14729 . 14751) (punctuation 14727 . 14728) (symbol 14699 . 14726) (punctuation 14697 . 14698) (symbol 14669 . 14696) (punctuation 14667 . 14668) (symbol 14649 . 14666) (punctuation 14647 . 14648) (symbol 14621 . 14646) (symbol 14603 . 14620) (CONST 14597 . 14602) (punctuation 14238 . 14239) (number 14236 . 14238) (punctuation 14234 . 14235) (punctuation 14233 . 14234) (symbol 14213 . 14232) (punctuation 14211 . 14212) (symbol 14184 . 14210) (symbol 14166 . 14183) (CONST 14160 . 14165) (punctuation 13890 . 13891) (number 13888 . 13890) (punctuation 13886 . 13887) (punctuation 13885 . 13886) (symbol 13866 . 13884) (punctuation 13864 . 13865) (symbol 13838 . 13863) (symbol 13820 . 13837) (CONST 13814 . 13819) (punctuation 13629 . 13630) (number 13627 . 13629) (punctuation 13625 . 13626) (punctuation 13624 . 13625) (symbol 13605 . 13623) (punctuation 13603 . 13604) (symbol 13577 . 13602) (symbol 13559 . 13576) (CONST 13553 . 13558) (punctuation 13370 . 13371) (number 13368 . 13370) (punctuation 13366 . 13367) (punctuation 13365 . 13366) (symbol 13347 . 13364) (punctuation 13345 . 13346) (symbol 13320 . 13344) (symbol 13302 . 13319) (CONST 13296 . 13301) (punctuation 13066 . 13067) (number 13064 . 13066) (punctuation 13062 . 13063) (punctuation 13061 . 13062) (symbol 13046 . 13060) (punctuation 13044 . 13045) (symbol 13022 . 13043) (symbol 13004 . 13021) (CONST 12998 . 13003) (punctuation 12780 . 12781) (number 12778 . 12780) (punctuation 12776 . 12777) (punctuation 12775 . 12776) (symbol 12756 . 12774) (punctuation 12754 . 12755) (symbol 12728 . 12753) (symbol 12710 . 12727) (CONST 12704 . 12709) (punctuation 12539 . 12540) (number 12537 . 12539) (punctuation 12535 . 12536) (punctuation 12534 . 12535) (symbol 12515 . 12533) (punctuation 12513 . 12514) (symbol 12487 . 12512) (symbol 12469 . 12486) (CONST 12463 . 12468) (punctuation 12303 . 12304) (number 12301 . 12303) (punctuation 12299 . 12300) (punctuation 12298 . 12299) (symbol 12282 . 12297) (punctuation 12280 . 12281) (symbol 12257 . 12279) (symbol 12239 . 12256) (CONST 12233 . 12238) (punctuation 12075 . 12076) (number 12073 . 12075) (punctuation 12071 . 12072) (punctuation 12070 . 12071) (symbol 12049 . 12069) (punctuation 12047 . 12048) (symbol 12019 . 12046) (symbol 12001 . 12018) (CONST 11995 . 12000) (punctuation 11841 . 11842) (number 11839 . 11841) (punctuation 11837 . 11838) (punctuation 11836 . 11837) (symbol 11815 . 11835) (punctuation 11813 . 11814) (symbol 11785 . 11812) (symbol 11767 . 11784) (CONST 11761 . 11766) (number 6512 . 6513) (punctuation 6510 . 6511) (symbol 6496 . 6509) (punctuation 6467 . 6468) (number 6466 . 6467) (punctuation 6464 . 6465) (symbol 6444 . 6463) (punctuation 6409 . 6410) (number 6408 . 6409) (punctuation 6406 . 6407) (symbol 6390 . 6405) (punctuation 6354 . 6355) (number 6353 . 6354) (punctuation 6351 . 6352) (symbol 6332 . 6350) (ENUM 6169 . 6173) (number 5913 . 5914) (punctuation 5911 . 5912) (symbol 5898 . 5910) (punctuation 5812 . 5813) (number 5811 . 5812) (punctuation 5809 . 5810) (symbol 5792 . 5808) (punctuation 5702 . 5703) (number 5701 . 5702) (punctuation 5699 . 5700) (symbol 5687 . 5698) (punctuation 5583 . 5584) (number 5582 . 5583) (punctuation 5580 . 5581) (symbol 5566 . 5579) (punctuation 5470 . 5471) (number 5469 . 5470) (punctuation 5467 . 5468) (symbol 5456 . 5466) (punctuation 5363 . 5364) (number 5362 . 5363) (punctuation 5360 . 5361) (symbol 5349 . 5359) (punctuation 5309 . 5310) (number 5308 . 5309) (punctuation 5306 . 5307) (symbol 5294 . 5305) (punctuation 5253 . 5254) (number 5252 . 5253) (punctuation 5250 . 5251) (symbol 5236 . 5249) (punctuation 5193 . 5194) (number 5192 . 5193) (punctuation 5190 . 5191) (symbol 5172 . 5189) (punctuation 5125 . 5126) (number 5124 . 5125) (punctuation 5122 . 5123) (symbol 5113 . 5121) (punctuation 5036 . 5037) (number 5035 . 5036) (punctuation 5033 . 5034) (symbol 5027 . 5032) (ENUM 4858 . 4862) (punctuation 4574 . 4575) (symbol 4556 . 4573) (USING 4550 . 4555) (punctuation 3864 . 3865) (symbol 3852 . 3863) (USING 3846 . 3851) (USING 3619 . 3624) (USING 3140 . 3145) (USING 2906 . 2911))
      :lexical-table 
        '(("ARA_CRYPTO_COMMON_BASE_ID_TYPES_H_")
          )
)
    (semanticdb-table "semanticdb-table-1808da4"
      :file "std_api.h"
      :fsize 7601
      :lastmodtime '(24305 25427 905961 596000))
    (semanticdb-table "semanticdb-table-1808dc4"
      :file "guid.h"
      :fsize 7134
      :lastmodtime '(24305 25427 901961 582000)))
  :file "!home!hyuk.myeong!work!G550!Apps!source!autosar!ara-api!crypto!crypto-lib!include!public!ara!crypto!common!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
